Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> codigo
Rule 1     codigo -> algoritmo
Rule 2     codigo -> algoritmo codigo
Rule 3     algoritmo -> asignacion
Rule 4     algoritmo -> sentenciaWHILE
Rule 5     algoritmo -> sentenciaFOR
Rule 6     algoritmo -> puts
Rule 7     algoritmo -> unless
Rule 8     algoritmo -> comentarios
Rule 9     algoritmo -> sentenciaIf
Rule 10    algoritmo -> sentenciaCASE
Rule 11    algoritmo -> slicing
Rule 12    algoritmo -> sentenciaBegin
Rule 13    algoritmo -> sentenciaFuncion
Rule 14    algoritmo -> split
Rule 15    algoritmo -> push
Rule 16    algoritmo -> append
Rule 17    algoritmo -> pop
Rule 18    unless -> UNLESS comparacion codigo END
Rule 19    sentenciaFOR -> FOR variables IN range DO codigo END
Rule 20    range -> ENTERO RANGO ENTERO
Rule 21    puts -> PUTS valor
Rule 22    reverse -> CADENA PUNTO REVERSE
Rule 23    split -> CADENA PUNTO SPLIT PIZQ valorsplit PDER
Rule 24    push -> variables PUNTO PUSH PIZQ valor PDER
Rule 25    append -> variables PUNTO APPEND PIZQ valor PDER
Rule 26    pop -> variables PUNTO POP PIZQ valor PDER
Rule 27    pop -> variables PUNTO POP PIZQ PDER
Rule 28    valorsplit -> CADENA
Rule 29    valorsplit -> CADENA COMA ENTERO
Rule 30    include -> CADENA PUNTO INCLUDE INTERROGACION CADENA
Rule 31    sentenciaFuncion -> FUNCION variables codigo END
Rule 32    sentenciaWHILE -> WHILE comparacion DO codigo END
Rule 33    sentenciaCASE -> CASE variables sentenciaWhens ELSE codigo END
Rule 34    sentenciaWHEN -> WHEN valorSencillo codigo
Rule 35    sentenciaWHEN -> WHEN valorSencillo THEN codigo
Rule 36    sentenciaAND -> comparacion AND comparacion
Rule 37    sentenciaOR -> comparacion OR comparacion
Rule 38    sentenciaWhens -> sentenciaWHEN
Rule 39    sentenciaWhens -> sentenciaWHEN sentenciaWhens
Rule 40    valorSencillo -> ENTERO
Rule 41    valorSencillo -> variables
Rule 42    valorSencillo -> CADENA
Rule 43    valorSencillo -> RANGO
Rule 44    sentenciaBegin -> BEGIN codigo END
Rule 45    asignacion -> variables IGUAL expresion
Rule 46    expresion -> valor
Rule 47    slicing -> variables CIZQ ENTERO CDER
Rule 48    slicing -> variables CIZQ ENTERO COMA ENTERO CDER
Rule 49    slicing -> variables CIZQ RANGO CDER
Rule 50    slicing -> variables CIZQ CADENA CDER
Rule 51    expresion -> valor operadorMat expresion
Rule 52    expresion -> PIZQ valor operadorMat expresion PDER
Rule 53    comparacion -> expresion operadorComp expresion
Rule 54    comparacion -> PIZQ expresion PDER operadorComp expresion
Rule 55    comparacion -> PIZQ expresion operadorComp expresion PDER
Rule 56    comparaciones -> comparacion
Rule 57    comparaciones -> sentenciaAND
Rule 58    comparaciones -> sentenciaOR
Rule 59    sentenciaBREAK -> BREAK
Rule 60    sentenciaBREAK -> BREAK variables
Rule 61    operadorMat -> MAS
Rule 62    operadorMat -> RESTA
Rule 63    operadorMat -> PROD
Rule 64    operadorMat -> DIVISION
Rule 65    operadorMat -> POTENCIA
Rule 66    operadorComp -> MAYOR
Rule 67    operadorComp -> MENOR
Rule 68    operadorComp -> COMP_IGUAL
Rule 69    operadorComp -> DIFERENTE
Rule 70    valor -> ENTERO
Rule 71    valor -> variables
Rule 72    valor -> CADENA
Rule 73    valor -> HASH
Rule 74    valor -> ARRAY
Rule 75    valor -> split
Rule 76    valor -> include
Rule 77    valor -> reverse
Rule 78    variables -> VARIABLE_LOCAL
Rule 79    variables -> VARIABLE_GLOBAL
Rule 80    variables -> VARIABLE_OBJETO
Rule 81    variables -> VARIABLE_CLASE
Rule 82    variables -> CONSTANTE
Rule 83    sentenciaIf -> IF comparaciones codigo finalIf
Rule 84    finalIf -> END
Rule 85    finalIf -> sentenciaBREAK END
Rule 86    comentarios -> COMENTARIO

Terminals, with rules where they appear

AND                  : 36
APPEND               : 25
ARRAY                : 74
BEGIN                : 44
BREAK                : 59 60
CADENA               : 22 23 28 29 30 30 42 50 72
CASE                 : 33
CDER                 : 47 48 49 50
CIZQ                 : 47 48 49 50
COMA                 : 29 48
COMENTARIO           : 86
COMP_IGUAL           : 68
CONSTANTE            : 82
DIFERENTE            : 69
DIVISION             : 64
DO                   : 19 32
ELSE                 : 33
END                  : 18 19 31 32 33 44 84 85
ENTERO               : 20 20 29 40 47 48 48 70
FOR                  : 19
FUNCION              : 31
HASH                 : 73
IF                   : 83
IGUAL                : 45
IN                   : 19
INCLUDE              : 30
INTERROGACION        : 30
MAS                  : 61
MAYOR                : 66
MENOR                : 67
OR                   : 37
PDER                 : 23 24 25 26 27 52 54 55
PIZQ                 : 23 24 25 26 27 52 54 55
POP                  : 26 27
POTENCIA             : 65
PROD                 : 63
PUNTO                : 22 23 24 25 26 27 30
PUSH                 : 24
PUTS                 : 21
RANGO                : 20 43 49
RESTA                : 62
REVERSE              : 22
SPLIT                : 23
THEN                 : 35
UNLESS               : 18
VARIABLE_CLASE       : 81
VARIABLE_GLOBAL      : 79
VARIABLE_LOCAL       : 78
VARIABLE_OBJETO      : 80
WHEN                 : 34 35
WHILE                : 32
error                : 

Nonterminals, with rules where they appear

algoritmo            : 1 2
append               : 16
asignacion           : 3
codigo               : 2 18 19 31 32 33 34 35 44 83 0
comentarios          : 8
comparacion          : 18 32 36 36 37 37 56
comparaciones        : 83
expresion            : 45 51 52 53 53 54 54 55 55
finalIf              : 83
include              : 76
operadorComp         : 53 54 55
operadorMat          : 51 52
pop                  : 17
push                 : 15
puts                 : 6
range                : 19
reverse              : 77
sentenciaAND         : 57
sentenciaBREAK       : 85
sentenciaBegin       : 12
sentenciaCASE        : 10
sentenciaFOR         : 5
sentenciaFuncion     : 13
sentenciaIf          : 9
sentenciaOR          : 58
sentenciaWHEN        : 38 39
sentenciaWHILE       : 4
sentenciaWhens       : 33 39
slicing              : 11
split                : 14 75
unless               : 7
valor                : 21 24 25 26 46 51 52
valorSencillo        : 34 35
valorsplit           : 23
variables            : 19 24 25 26 27 31 33 41 45 47 48 49 50 60 71

Parsing method: LALR

state 0

    (0) S' -> . codigo
    (1) codigo -> . algoritmo
    (2) codigo -> . algoritmo codigo
    (3) algoritmo -> . asignacion
    (4) algoritmo -> . sentenciaWHILE
    (5) algoritmo -> . sentenciaFOR
    (6) algoritmo -> . puts
    (7) algoritmo -> . unless
    (8) algoritmo -> . comentarios
    (9) algoritmo -> . sentenciaIf
    (10) algoritmo -> . sentenciaCASE
    (11) algoritmo -> . slicing
    (12) algoritmo -> . sentenciaBegin
    (13) algoritmo -> . sentenciaFuncion
    (14) algoritmo -> . split
    (15) algoritmo -> . push
    (16) algoritmo -> . append
    (17) algoritmo -> . pop
    (45) asignacion -> . variables IGUAL expresion
    (32) sentenciaWHILE -> . WHILE comparacion DO codigo END
    (19) sentenciaFOR -> . FOR variables IN range DO codigo END
    (21) puts -> . PUTS valor
    (18) unless -> . UNLESS comparacion codigo END
    (86) comentarios -> . COMENTARIO
    (83) sentenciaIf -> . IF comparaciones codigo finalIf
    (33) sentenciaCASE -> . CASE variables sentenciaWhens ELSE codigo END
    (47) slicing -> . variables CIZQ ENTERO CDER
    (48) slicing -> . variables CIZQ ENTERO COMA ENTERO CDER
    (49) slicing -> . variables CIZQ RANGO CDER
    (50) slicing -> . variables CIZQ CADENA CDER
    (44) sentenciaBegin -> . BEGIN codigo END
    (31) sentenciaFuncion -> . FUNCION variables codigo END
    (23) split -> . CADENA PUNTO SPLIT PIZQ valorsplit PDER
    (24) push -> . variables PUNTO PUSH PIZQ valor PDER
    (25) append -> . variables PUNTO APPEND PIZQ valor PDER
    (26) pop -> . variables PUNTO POP PIZQ valor PDER
    (27) pop -> . variables PUNTO POP PIZQ PDER
    (78) variables -> . VARIABLE_LOCAL
    (79) variables -> . VARIABLE_GLOBAL
    (80) variables -> . VARIABLE_OBJETO
    (81) variables -> . VARIABLE_CLASE
    (82) variables -> . CONSTANTE

    WHILE           shift and go to state 19
    FOR             shift and go to state 20
    PUTS            shift and go to state 21
    UNLESS          shift and go to state 22
    COMENTARIO      shift and go to state 23
    IF              shift and go to state 24
    CASE            shift and go to state 25
    BEGIN           shift and go to state 27
    FUNCION         shift and go to state 28
    CADENA          shift and go to state 26
    VARIABLE_LOCAL  shift and go to state 29
    VARIABLE_GLOBAL shift and go to state 30
    VARIABLE_OBJETO shift and go to state 31
    VARIABLE_CLASE  shift and go to state 32
    CONSTANTE       shift and go to state 33

    codigo                         shift and go to state 1
    algoritmo                      shift and go to state 2
    asignacion                     shift and go to state 3
    sentenciaWHILE                 shift and go to state 4
    sentenciaFOR                   shift and go to state 5
    puts                           shift and go to state 6
    unless                         shift and go to state 7
    comentarios                    shift and go to state 8
    sentenciaIf                    shift and go to state 9
    sentenciaCASE                  shift and go to state 10
    slicing                        shift and go to state 11
    sentenciaBegin                 shift and go to state 12
    sentenciaFuncion               shift and go to state 13
    split                          shift and go to state 14
    push                           shift and go to state 15
    append                         shift and go to state 16
    pop                            shift and go to state 17
    variables                      shift and go to state 18

state 1

    (0) S' -> codigo .



state 2

    (1) codigo -> algoritmo .
    (2) codigo -> algoritmo . codigo
    (1) codigo -> . algoritmo
    (2) codigo -> . algoritmo codigo
    (3) algoritmo -> . asignacion
    (4) algoritmo -> . sentenciaWHILE
    (5) algoritmo -> . sentenciaFOR
    (6) algoritmo -> . puts
    (7) algoritmo -> . unless
    (8) algoritmo -> . comentarios
    (9) algoritmo -> . sentenciaIf
    (10) algoritmo -> . sentenciaCASE
    (11) algoritmo -> . slicing
    (12) algoritmo -> . sentenciaBegin
    (13) algoritmo -> . sentenciaFuncion
    (14) algoritmo -> . split
    (15) algoritmo -> . push
    (16) algoritmo -> . append
    (17) algoritmo -> . pop
    (45) asignacion -> . variables IGUAL expresion
    (32) sentenciaWHILE -> . WHILE comparacion DO codigo END
    (19) sentenciaFOR -> . FOR variables IN range DO codigo END
    (21) puts -> . PUTS valor
    (18) unless -> . UNLESS comparacion codigo END
    (86) comentarios -> . COMENTARIO
    (83) sentenciaIf -> . IF comparaciones codigo finalIf
    (33) sentenciaCASE -> . CASE variables sentenciaWhens ELSE codigo END
    (47) slicing -> . variables CIZQ ENTERO CDER
    (48) slicing -> . variables CIZQ ENTERO COMA ENTERO CDER
    (49) slicing -> . variables CIZQ RANGO CDER
    (50) slicing -> . variables CIZQ CADENA CDER
    (44) sentenciaBegin -> . BEGIN codigo END
    (31) sentenciaFuncion -> . FUNCION variables codigo END
    (23) split -> . CADENA PUNTO SPLIT PIZQ valorsplit PDER
    (24) push -> . variables PUNTO PUSH PIZQ valor PDER
    (25) append -> . variables PUNTO APPEND PIZQ valor PDER
    (26) pop -> . variables PUNTO POP PIZQ valor PDER
    (27) pop -> . variables PUNTO POP PIZQ PDER
    (78) variables -> . VARIABLE_LOCAL
    (79) variables -> . VARIABLE_GLOBAL
    (80) variables -> . VARIABLE_OBJETO
    (81) variables -> . VARIABLE_CLASE
    (82) variables -> . CONSTANTE

    $end            reduce using rule 1 (codigo -> algoritmo .)
    END             reduce using rule 1 (codigo -> algoritmo .)
    BREAK           reduce using rule 1 (codigo -> algoritmo .)
    WHEN            reduce using rule 1 (codigo -> algoritmo .)
    ELSE            reduce using rule 1 (codigo -> algoritmo .)
    WHILE           shift and go to state 19
    FOR             shift and go to state 20
    PUTS            shift and go to state 21
    UNLESS          shift and go to state 22
    COMENTARIO      shift and go to state 23
    IF              shift and go to state 24
    CASE            shift and go to state 25
    BEGIN           shift and go to state 27
    FUNCION         shift and go to state 28
    CADENA          shift and go to state 26
    VARIABLE_LOCAL  shift and go to state 29
    VARIABLE_GLOBAL shift and go to state 30
    VARIABLE_OBJETO shift and go to state 31
    VARIABLE_CLASE  shift and go to state 32
    CONSTANTE       shift and go to state 33

    algoritmo                      shift and go to state 2
    codigo                         shift and go to state 34
    asignacion                     shift and go to state 3
    sentenciaWHILE                 shift and go to state 4
    sentenciaFOR                   shift and go to state 5
    puts                           shift and go to state 6
    unless                         shift and go to state 7
    comentarios                    shift and go to state 8
    sentenciaIf                    shift and go to state 9
    sentenciaCASE                  shift and go to state 10
    slicing                        shift and go to state 11
    sentenciaBegin                 shift and go to state 12
    sentenciaFuncion               shift and go to state 13
    split                          shift and go to state 14
    push                           shift and go to state 15
    append                         shift and go to state 16
    pop                            shift and go to state 17
    variables                      shift and go to state 18

state 3

    (3) algoritmo -> asignacion .

    WHILE           reduce using rule 3 (algoritmo -> asignacion .)
    FOR             reduce using rule 3 (algoritmo -> asignacion .)
    PUTS            reduce using rule 3 (algoritmo -> asignacion .)
    UNLESS          reduce using rule 3 (algoritmo -> asignacion .)
    COMENTARIO      reduce using rule 3 (algoritmo -> asignacion .)
    IF              reduce using rule 3 (algoritmo -> asignacion .)
    CASE            reduce using rule 3 (algoritmo -> asignacion .)
    BEGIN           reduce using rule 3 (algoritmo -> asignacion .)
    FUNCION         reduce using rule 3 (algoritmo -> asignacion .)
    CADENA          reduce using rule 3 (algoritmo -> asignacion .)
    VARIABLE_LOCAL  reduce using rule 3 (algoritmo -> asignacion .)
    VARIABLE_GLOBAL reduce using rule 3 (algoritmo -> asignacion .)
    VARIABLE_OBJETO reduce using rule 3 (algoritmo -> asignacion .)
    VARIABLE_CLASE  reduce using rule 3 (algoritmo -> asignacion .)
    CONSTANTE       reduce using rule 3 (algoritmo -> asignacion .)
    $end            reduce using rule 3 (algoritmo -> asignacion .)
    END             reduce using rule 3 (algoritmo -> asignacion .)
    BREAK           reduce using rule 3 (algoritmo -> asignacion .)
    WHEN            reduce using rule 3 (algoritmo -> asignacion .)
    ELSE            reduce using rule 3 (algoritmo -> asignacion .)


state 4

    (4) algoritmo -> sentenciaWHILE .

    WHILE           reduce using rule 4 (algoritmo -> sentenciaWHILE .)
    FOR             reduce using rule 4 (algoritmo -> sentenciaWHILE .)
    PUTS            reduce using rule 4 (algoritmo -> sentenciaWHILE .)
    UNLESS          reduce using rule 4 (algoritmo -> sentenciaWHILE .)
    COMENTARIO      reduce using rule 4 (algoritmo -> sentenciaWHILE .)
    IF              reduce using rule 4 (algoritmo -> sentenciaWHILE .)
    CASE            reduce using rule 4 (algoritmo -> sentenciaWHILE .)
    BEGIN           reduce using rule 4 (algoritmo -> sentenciaWHILE .)
    FUNCION         reduce using rule 4 (algoritmo -> sentenciaWHILE .)
    CADENA          reduce using rule 4 (algoritmo -> sentenciaWHILE .)
    VARIABLE_LOCAL  reduce using rule 4 (algoritmo -> sentenciaWHILE .)
    VARIABLE_GLOBAL reduce using rule 4 (algoritmo -> sentenciaWHILE .)
    VARIABLE_OBJETO reduce using rule 4 (algoritmo -> sentenciaWHILE .)
    VARIABLE_CLASE  reduce using rule 4 (algoritmo -> sentenciaWHILE .)
    CONSTANTE       reduce using rule 4 (algoritmo -> sentenciaWHILE .)
    $end            reduce using rule 4 (algoritmo -> sentenciaWHILE .)
    END             reduce using rule 4 (algoritmo -> sentenciaWHILE .)
    BREAK           reduce using rule 4 (algoritmo -> sentenciaWHILE .)
    WHEN            reduce using rule 4 (algoritmo -> sentenciaWHILE .)
    ELSE            reduce using rule 4 (algoritmo -> sentenciaWHILE .)


state 5

    (5) algoritmo -> sentenciaFOR .

    WHILE           reduce using rule 5 (algoritmo -> sentenciaFOR .)
    FOR             reduce using rule 5 (algoritmo -> sentenciaFOR .)
    PUTS            reduce using rule 5 (algoritmo -> sentenciaFOR .)
    UNLESS          reduce using rule 5 (algoritmo -> sentenciaFOR .)
    COMENTARIO      reduce using rule 5 (algoritmo -> sentenciaFOR .)
    IF              reduce using rule 5 (algoritmo -> sentenciaFOR .)
    CASE            reduce using rule 5 (algoritmo -> sentenciaFOR .)
    BEGIN           reduce using rule 5 (algoritmo -> sentenciaFOR .)
    FUNCION         reduce using rule 5 (algoritmo -> sentenciaFOR .)
    CADENA          reduce using rule 5 (algoritmo -> sentenciaFOR .)
    VARIABLE_LOCAL  reduce using rule 5 (algoritmo -> sentenciaFOR .)
    VARIABLE_GLOBAL reduce using rule 5 (algoritmo -> sentenciaFOR .)
    VARIABLE_OBJETO reduce using rule 5 (algoritmo -> sentenciaFOR .)
    VARIABLE_CLASE  reduce using rule 5 (algoritmo -> sentenciaFOR .)
    CONSTANTE       reduce using rule 5 (algoritmo -> sentenciaFOR .)
    $end            reduce using rule 5 (algoritmo -> sentenciaFOR .)
    END             reduce using rule 5 (algoritmo -> sentenciaFOR .)
    BREAK           reduce using rule 5 (algoritmo -> sentenciaFOR .)
    WHEN            reduce using rule 5 (algoritmo -> sentenciaFOR .)
    ELSE            reduce using rule 5 (algoritmo -> sentenciaFOR .)


state 6

    (6) algoritmo -> puts .

    WHILE           reduce using rule 6 (algoritmo -> puts .)
    FOR             reduce using rule 6 (algoritmo -> puts .)
    PUTS            reduce using rule 6 (algoritmo -> puts .)
    UNLESS          reduce using rule 6 (algoritmo -> puts .)
    COMENTARIO      reduce using rule 6 (algoritmo -> puts .)
    IF              reduce using rule 6 (algoritmo -> puts .)
    CASE            reduce using rule 6 (algoritmo -> puts .)
    BEGIN           reduce using rule 6 (algoritmo -> puts .)
    FUNCION         reduce using rule 6 (algoritmo -> puts .)
    CADENA          reduce using rule 6 (algoritmo -> puts .)
    VARIABLE_LOCAL  reduce using rule 6 (algoritmo -> puts .)
    VARIABLE_GLOBAL reduce using rule 6 (algoritmo -> puts .)
    VARIABLE_OBJETO reduce using rule 6 (algoritmo -> puts .)
    VARIABLE_CLASE  reduce using rule 6 (algoritmo -> puts .)
    CONSTANTE       reduce using rule 6 (algoritmo -> puts .)
    $end            reduce using rule 6 (algoritmo -> puts .)
    END             reduce using rule 6 (algoritmo -> puts .)
    BREAK           reduce using rule 6 (algoritmo -> puts .)
    WHEN            reduce using rule 6 (algoritmo -> puts .)
    ELSE            reduce using rule 6 (algoritmo -> puts .)


state 7

    (7) algoritmo -> unless .

    WHILE           reduce using rule 7 (algoritmo -> unless .)
    FOR             reduce using rule 7 (algoritmo -> unless .)
    PUTS            reduce using rule 7 (algoritmo -> unless .)
    UNLESS          reduce using rule 7 (algoritmo -> unless .)
    COMENTARIO      reduce using rule 7 (algoritmo -> unless .)
    IF              reduce using rule 7 (algoritmo -> unless .)
    CASE            reduce using rule 7 (algoritmo -> unless .)
    BEGIN           reduce using rule 7 (algoritmo -> unless .)
    FUNCION         reduce using rule 7 (algoritmo -> unless .)
    CADENA          reduce using rule 7 (algoritmo -> unless .)
    VARIABLE_LOCAL  reduce using rule 7 (algoritmo -> unless .)
    VARIABLE_GLOBAL reduce using rule 7 (algoritmo -> unless .)
    VARIABLE_OBJETO reduce using rule 7 (algoritmo -> unless .)
    VARIABLE_CLASE  reduce using rule 7 (algoritmo -> unless .)
    CONSTANTE       reduce using rule 7 (algoritmo -> unless .)
    $end            reduce using rule 7 (algoritmo -> unless .)
    END             reduce using rule 7 (algoritmo -> unless .)
    BREAK           reduce using rule 7 (algoritmo -> unless .)
    WHEN            reduce using rule 7 (algoritmo -> unless .)
    ELSE            reduce using rule 7 (algoritmo -> unless .)


state 8

    (8) algoritmo -> comentarios .

    WHILE           reduce using rule 8 (algoritmo -> comentarios .)
    FOR             reduce using rule 8 (algoritmo -> comentarios .)
    PUTS            reduce using rule 8 (algoritmo -> comentarios .)
    UNLESS          reduce using rule 8 (algoritmo -> comentarios .)
    COMENTARIO      reduce using rule 8 (algoritmo -> comentarios .)
    IF              reduce using rule 8 (algoritmo -> comentarios .)
    CASE            reduce using rule 8 (algoritmo -> comentarios .)
    BEGIN           reduce using rule 8 (algoritmo -> comentarios .)
    FUNCION         reduce using rule 8 (algoritmo -> comentarios .)
    CADENA          reduce using rule 8 (algoritmo -> comentarios .)
    VARIABLE_LOCAL  reduce using rule 8 (algoritmo -> comentarios .)
    VARIABLE_GLOBAL reduce using rule 8 (algoritmo -> comentarios .)
    VARIABLE_OBJETO reduce using rule 8 (algoritmo -> comentarios .)
    VARIABLE_CLASE  reduce using rule 8 (algoritmo -> comentarios .)
    CONSTANTE       reduce using rule 8 (algoritmo -> comentarios .)
    $end            reduce using rule 8 (algoritmo -> comentarios .)
    END             reduce using rule 8 (algoritmo -> comentarios .)
    BREAK           reduce using rule 8 (algoritmo -> comentarios .)
    WHEN            reduce using rule 8 (algoritmo -> comentarios .)
    ELSE            reduce using rule 8 (algoritmo -> comentarios .)


state 9

    (9) algoritmo -> sentenciaIf .

    WHILE           reduce using rule 9 (algoritmo -> sentenciaIf .)
    FOR             reduce using rule 9 (algoritmo -> sentenciaIf .)
    PUTS            reduce using rule 9 (algoritmo -> sentenciaIf .)
    UNLESS          reduce using rule 9 (algoritmo -> sentenciaIf .)
    COMENTARIO      reduce using rule 9 (algoritmo -> sentenciaIf .)
    IF              reduce using rule 9 (algoritmo -> sentenciaIf .)
    CASE            reduce using rule 9 (algoritmo -> sentenciaIf .)
    BEGIN           reduce using rule 9 (algoritmo -> sentenciaIf .)
    FUNCION         reduce using rule 9 (algoritmo -> sentenciaIf .)
    CADENA          reduce using rule 9 (algoritmo -> sentenciaIf .)
    VARIABLE_LOCAL  reduce using rule 9 (algoritmo -> sentenciaIf .)
    VARIABLE_GLOBAL reduce using rule 9 (algoritmo -> sentenciaIf .)
    VARIABLE_OBJETO reduce using rule 9 (algoritmo -> sentenciaIf .)
    VARIABLE_CLASE  reduce using rule 9 (algoritmo -> sentenciaIf .)
    CONSTANTE       reduce using rule 9 (algoritmo -> sentenciaIf .)
    $end            reduce using rule 9 (algoritmo -> sentenciaIf .)
    END             reduce using rule 9 (algoritmo -> sentenciaIf .)
    BREAK           reduce using rule 9 (algoritmo -> sentenciaIf .)
    WHEN            reduce using rule 9 (algoritmo -> sentenciaIf .)
    ELSE            reduce using rule 9 (algoritmo -> sentenciaIf .)


state 10

    (10) algoritmo -> sentenciaCASE .

    WHILE           reduce using rule 10 (algoritmo -> sentenciaCASE .)
    FOR             reduce using rule 10 (algoritmo -> sentenciaCASE .)
    PUTS            reduce using rule 10 (algoritmo -> sentenciaCASE .)
    UNLESS          reduce using rule 10 (algoritmo -> sentenciaCASE .)
    COMENTARIO      reduce using rule 10 (algoritmo -> sentenciaCASE .)
    IF              reduce using rule 10 (algoritmo -> sentenciaCASE .)
    CASE            reduce using rule 10 (algoritmo -> sentenciaCASE .)
    BEGIN           reduce using rule 10 (algoritmo -> sentenciaCASE .)
    FUNCION         reduce using rule 10 (algoritmo -> sentenciaCASE .)
    CADENA          reduce using rule 10 (algoritmo -> sentenciaCASE .)
    VARIABLE_LOCAL  reduce using rule 10 (algoritmo -> sentenciaCASE .)
    VARIABLE_GLOBAL reduce using rule 10 (algoritmo -> sentenciaCASE .)
    VARIABLE_OBJETO reduce using rule 10 (algoritmo -> sentenciaCASE .)
    VARIABLE_CLASE  reduce using rule 10 (algoritmo -> sentenciaCASE .)
    CONSTANTE       reduce using rule 10 (algoritmo -> sentenciaCASE .)
    $end            reduce using rule 10 (algoritmo -> sentenciaCASE .)
    END             reduce using rule 10 (algoritmo -> sentenciaCASE .)
    BREAK           reduce using rule 10 (algoritmo -> sentenciaCASE .)
    WHEN            reduce using rule 10 (algoritmo -> sentenciaCASE .)
    ELSE            reduce using rule 10 (algoritmo -> sentenciaCASE .)


state 11

    (11) algoritmo -> slicing .

    WHILE           reduce using rule 11 (algoritmo -> slicing .)
    FOR             reduce using rule 11 (algoritmo -> slicing .)
    PUTS            reduce using rule 11 (algoritmo -> slicing .)
    UNLESS          reduce using rule 11 (algoritmo -> slicing .)
    COMENTARIO      reduce using rule 11 (algoritmo -> slicing .)
    IF              reduce using rule 11 (algoritmo -> slicing .)
    CASE            reduce using rule 11 (algoritmo -> slicing .)
    BEGIN           reduce using rule 11 (algoritmo -> slicing .)
    FUNCION         reduce using rule 11 (algoritmo -> slicing .)
    CADENA          reduce using rule 11 (algoritmo -> slicing .)
    VARIABLE_LOCAL  reduce using rule 11 (algoritmo -> slicing .)
    VARIABLE_GLOBAL reduce using rule 11 (algoritmo -> slicing .)
    VARIABLE_OBJETO reduce using rule 11 (algoritmo -> slicing .)
    VARIABLE_CLASE  reduce using rule 11 (algoritmo -> slicing .)
    CONSTANTE       reduce using rule 11 (algoritmo -> slicing .)
    $end            reduce using rule 11 (algoritmo -> slicing .)
    END             reduce using rule 11 (algoritmo -> slicing .)
    BREAK           reduce using rule 11 (algoritmo -> slicing .)
    WHEN            reduce using rule 11 (algoritmo -> slicing .)
    ELSE            reduce using rule 11 (algoritmo -> slicing .)


state 12

    (12) algoritmo -> sentenciaBegin .

    WHILE           reduce using rule 12 (algoritmo -> sentenciaBegin .)
    FOR             reduce using rule 12 (algoritmo -> sentenciaBegin .)
    PUTS            reduce using rule 12 (algoritmo -> sentenciaBegin .)
    UNLESS          reduce using rule 12 (algoritmo -> sentenciaBegin .)
    COMENTARIO      reduce using rule 12 (algoritmo -> sentenciaBegin .)
    IF              reduce using rule 12 (algoritmo -> sentenciaBegin .)
    CASE            reduce using rule 12 (algoritmo -> sentenciaBegin .)
    BEGIN           reduce using rule 12 (algoritmo -> sentenciaBegin .)
    FUNCION         reduce using rule 12 (algoritmo -> sentenciaBegin .)
    CADENA          reduce using rule 12 (algoritmo -> sentenciaBegin .)
    VARIABLE_LOCAL  reduce using rule 12 (algoritmo -> sentenciaBegin .)
    VARIABLE_GLOBAL reduce using rule 12 (algoritmo -> sentenciaBegin .)
    VARIABLE_OBJETO reduce using rule 12 (algoritmo -> sentenciaBegin .)
    VARIABLE_CLASE  reduce using rule 12 (algoritmo -> sentenciaBegin .)
    CONSTANTE       reduce using rule 12 (algoritmo -> sentenciaBegin .)
    $end            reduce using rule 12 (algoritmo -> sentenciaBegin .)
    END             reduce using rule 12 (algoritmo -> sentenciaBegin .)
    BREAK           reduce using rule 12 (algoritmo -> sentenciaBegin .)
    WHEN            reduce using rule 12 (algoritmo -> sentenciaBegin .)
    ELSE            reduce using rule 12 (algoritmo -> sentenciaBegin .)


state 13

    (13) algoritmo -> sentenciaFuncion .

    WHILE           reduce using rule 13 (algoritmo -> sentenciaFuncion .)
    FOR             reduce using rule 13 (algoritmo -> sentenciaFuncion .)
    PUTS            reduce using rule 13 (algoritmo -> sentenciaFuncion .)
    UNLESS          reduce using rule 13 (algoritmo -> sentenciaFuncion .)
    COMENTARIO      reduce using rule 13 (algoritmo -> sentenciaFuncion .)
    IF              reduce using rule 13 (algoritmo -> sentenciaFuncion .)
    CASE            reduce using rule 13 (algoritmo -> sentenciaFuncion .)
    BEGIN           reduce using rule 13 (algoritmo -> sentenciaFuncion .)
    FUNCION         reduce using rule 13 (algoritmo -> sentenciaFuncion .)
    CADENA          reduce using rule 13 (algoritmo -> sentenciaFuncion .)
    VARIABLE_LOCAL  reduce using rule 13 (algoritmo -> sentenciaFuncion .)
    VARIABLE_GLOBAL reduce using rule 13 (algoritmo -> sentenciaFuncion .)
    VARIABLE_OBJETO reduce using rule 13 (algoritmo -> sentenciaFuncion .)
    VARIABLE_CLASE  reduce using rule 13 (algoritmo -> sentenciaFuncion .)
    CONSTANTE       reduce using rule 13 (algoritmo -> sentenciaFuncion .)
    $end            reduce using rule 13 (algoritmo -> sentenciaFuncion .)
    END             reduce using rule 13 (algoritmo -> sentenciaFuncion .)
    BREAK           reduce using rule 13 (algoritmo -> sentenciaFuncion .)
    WHEN            reduce using rule 13 (algoritmo -> sentenciaFuncion .)
    ELSE            reduce using rule 13 (algoritmo -> sentenciaFuncion .)


state 14

    (14) algoritmo -> split .

    WHILE           reduce using rule 14 (algoritmo -> split .)
    FOR             reduce using rule 14 (algoritmo -> split .)
    PUTS            reduce using rule 14 (algoritmo -> split .)
    UNLESS          reduce using rule 14 (algoritmo -> split .)
    COMENTARIO      reduce using rule 14 (algoritmo -> split .)
    IF              reduce using rule 14 (algoritmo -> split .)
    CASE            reduce using rule 14 (algoritmo -> split .)
    BEGIN           reduce using rule 14 (algoritmo -> split .)
    FUNCION         reduce using rule 14 (algoritmo -> split .)
    CADENA          reduce using rule 14 (algoritmo -> split .)
    VARIABLE_LOCAL  reduce using rule 14 (algoritmo -> split .)
    VARIABLE_GLOBAL reduce using rule 14 (algoritmo -> split .)
    VARIABLE_OBJETO reduce using rule 14 (algoritmo -> split .)
    VARIABLE_CLASE  reduce using rule 14 (algoritmo -> split .)
    CONSTANTE       reduce using rule 14 (algoritmo -> split .)
    $end            reduce using rule 14 (algoritmo -> split .)
    END             reduce using rule 14 (algoritmo -> split .)
    BREAK           reduce using rule 14 (algoritmo -> split .)
    WHEN            reduce using rule 14 (algoritmo -> split .)
    ELSE            reduce using rule 14 (algoritmo -> split .)


state 15

    (15) algoritmo -> push .

    WHILE           reduce using rule 15 (algoritmo -> push .)
    FOR             reduce using rule 15 (algoritmo -> push .)
    PUTS            reduce using rule 15 (algoritmo -> push .)
    UNLESS          reduce using rule 15 (algoritmo -> push .)
    COMENTARIO      reduce using rule 15 (algoritmo -> push .)
    IF              reduce using rule 15 (algoritmo -> push .)
    CASE            reduce using rule 15 (algoritmo -> push .)
    BEGIN           reduce using rule 15 (algoritmo -> push .)
    FUNCION         reduce using rule 15 (algoritmo -> push .)
    CADENA          reduce using rule 15 (algoritmo -> push .)
    VARIABLE_LOCAL  reduce using rule 15 (algoritmo -> push .)
    VARIABLE_GLOBAL reduce using rule 15 (algoritmo -> push .)
    VARIABLE_OBJETO reduce using rule 15 (algoritmo -> push .)
    VARIABLE_CLASE  reduce using rule 15 (algoritmo -> push .)
    CONSTANTE       reduce using rule 15 (algoritmo -> push .)
    $end            reduce using rule 15 (algoritmo -> push .)
    END             reduce using rule 15 (algoritmo -> push .)
    BREAK           reduce using rule 15 (algoritmo -> push .)
    WHEN            reduce using rule 15 (algoritmo -> push .)
    ELSE            reduce using rule 15 (algoritmo -> push .)


state 16

    (16) algoritmo -> append .

    WHILE           reduce using rule 16 (algoritmo -> append .)
    FOR             reduce using rule 16 (algoritmo -> append .)
    PUTS            reduce using rule 16 (algoritmo -> append .)
    UNLESS          reduce using rule 16 (algoritmo -> append .)
    COMENTARIO      reduce using rule 16 (algoritmo -> append .)
    IF              reduce using rule 16 (algoritmo -> append .)
    CASE            reduce using rule 16 (algoritmo -> append .)
    BEGIN           reduce using rule 16 (algoritmo -> append .)
    FUNCION         reduce using rule 16 (algoritmo -> append .)
    CADENA          reduce using rule 16 (algoritmo -> append .)
    VARIABLE_LOCAL  reduce using rule 16 (algoritmo -> append .)
    VARIABLE_GLOBAL reduce using rule 16 (algoritmo -> append .)
    VARIABLE_OBJETO reduce using rule 16 (algoritmo -> append .)
    VARIABLE_CLASE  reduce using rule 16 (algoritmo -> append .)
    CONSTANTE       reduce using rule 16 (algoritmo -> append .)
    $end            reduce using rule 16 (algoritmo -> append .)
    END             reduce using rule 16 (algoritmo -> append .)
    BREAK           reduce using rule 16 (algoritmo -> append .)
    WHEN            reduce using rule 16 (algoritmo -> append .)
    ELSE            reduce using rule 16 (algoritmo -> append .)


state 17

    (17) algoritmo -> pop .

    WHILE           reduce using rule 17 (algoritmo -> pop .)
    FOR             reduce using rule 17 (algoritmo -> pop .)
    PUTS            reduce using rule 17 (algoritmo -> pop .)
    UNLESS          reduce using rule 17 (algoritmo -> pop .)
    COMENTARIO      reduce using rule 17 (algoritmo -> pop .)
    IF              reduce using rule 17 (algoritmo -> pop .)
    CASE            reduce using rule 17 (algoritmo -> pop .)
    BEGIN           reduce using rule 17 (algoritmo -> pop .)
    FUNCION         reduce using rule 17 (algoritmo -> pop .)
    CADENA          reduce using rule 17 (algoritmo -> pop .)
    VARIABLE_LOCAL  reduce using rule 17 (algoritmo -> pop .)
    VARIABLE_GLOBAL reduce using rule 17 (algoritmo -> pop .)
    VARIABLE_OBJETO reduce using rule 17 (algoritmo -> pop .)
    VARIABLE_CLASE  reduce using rule 17 (algoritmo -> pop .)
    CONSTANTE       reduce using rule 17 (algoritmo -> pop .)
    $end            reduce using rule 17 (algoritmo -> pop .)
    END             reduce using rule 17 (algoritmo -> pop .)
    BREAK           reduce using rule 17 (algoritmo -> pop .)
    WHEN            reduce using rule 17 (algoritmo -> pop .)
    ELSE            reduce using rule 17 (algoritmo -> pop .)


state 18

    (45) asignacion -> variables . IGUAL expresion
    (47) slicing -> variables . CIZQ ENTERO CDER
    (48) slicing -> variables . CIZQ ENTERO COMA ENTERO CDER
    (49) slicing -> variables . CIZQ RANGO CDER
    (50) slicing -> variables . CIZQ CADENA CDER
    (24) push -> variables . PUNTO PUSH PIZQ valor PDER
    (25) append -> variables . PUNTO APPEND PIZQ valor PDER
    (26) pop -> variables . PUNTO POP PIZQ valor PDER
    (27) pop -> variables . PUNTO POP PIZQ PDER

    IGUAL           shift and go to state 35
    CIZQ            shift and go to state 36
    PUNTO           shift and go to state 37


state 19

    (32) sentenciaWHILE -> WHILE . comparacion DO codigo END
    (53) comparacion -> . expresion operadorComp expresion
    (54) comparacion -> . PIZQ expresion PDER operadorComp expresion
    (55) comparacion -> . PIZQ expresion operadorComp expresion PDER
    (46) expresion -> . valor
    (51) expresion -> . valor operadorMat expresion
    (52) expresion -> . PIZQ valor operadorMat expresion PDER
    (70) valor -> . ENTERO
    (71) valor -> . variables
    (72) valor -> . CADENA
    (73) valor -> . HASH
    (74) valor -> . ARRAY
    (75) valor -> . split
    (76) valor -> . include
    (77) valor -> . reverse
    (78) variables -> . VARIABLE_LOCAL
    (79) variables -> . VARIABLE_GLOBAL
    (80) variables -> . VARIABLE_OBJETO
    (81) variables -> . VARIABLE_CLASE
    (82) variables -> . CONSTANTE
    (23) split -> . CADENA PUNTO SPLIT PIZQ valorsplit PDER
    (30) include -> . CADENA PUNTO INCLUDE INTERROGACION CADENA
    (22) reverse -> . CADENA PUNTO REVERSE

    PIZQ            shift and go to state 40
    ENTERO          shift and go to state 42
    CADENA          shift and go to state 44
    HASH            shift and go to state 45
    ARRAY           shift and go to state 46
    VARIABLE_LOCAL  shift and go to state 29
    VARIABLE_GLOBAL shift and go to state 30
    VARIABLE_OBJETO shift and go to state 31
    VARIABLE_CLASE  shift and go to state 32
    CONSTANTE       shift and go to state 33

    comparacion                    shift and go to state 38
    expresion                      shift and go to state 39
    valor                          shift and go to state 41
    variables                      shift and go to state 43
    split                          shift and go to state 47
    include                        shift and go to state 48
    reverse                        shift and go to state 49

state 20

    (19) sentenciaFOR -> FOR . variables IN range DO codigo END
    (78) variables -> . VARIABLE_LOCAL
    (79) variables -> . VARIABLE_GLOBAL
    (80) variables -> . VARIABLE_OBJETO
    (81) variables -> . VARIABLE_CLASE
    (82) variables -> . CONSTANTE

    VARIABLE_LOCAL  shift and go to state 29
    VARIABLE_GLOBAL shift and go to state 30
    VARIABLE_OBJETO shift and go to state 31
    VARIABLE_CLASE  shift and go to state 32
    CONSTANTE       shift and go to state 33

    variables                      shift and go to state 50

state 21

    (21) puts -> PUTS . valor
    (70) valor -> . ENTERO
    (71) valor -> . variables
    (72) valor -> . CADENA
    (73) valor -> . HASH
    (74) valor -> . ARRAY
    (75) valor -> . split
    (76) valor -> . include
    (77) valor -> . reverse
    (78) variables -> . VARIABLE_LOCAL
    (79) variables -> . VARIABLE_GLOBAL
    (80) variables -> . VARIABLE_OBJETO
    (81) variables -> . VARIABLE_CLASE
    (82) variables -> . CONSTANTE
    (23) split -> . CADENA PUNTO SPLIT PIZQ valorsplit PDER
    (30) include -> . CADENA PUNTO INCLUDE INTERROGACION CADENA
    (22) reverse -> . CADENA PUNTO REVERSE

    ENTERO          shift and go to state 42
    CADENA          shift and go to state 44
    HASH            shift and go to state 45
    ARRAY           shift and go to state 46
    VARIABLE_LOCAL  shift and go to state 29
    VARIABLE_GLOBAL shift and go to state 30
    VARIABLE_OBJETO shift and go to state 31
    VARIABLE_CLASE  shift and go to state 32
    CONSTANTE       shift and go to state 33

    valor                          shift and go to state 51
    variables                      shift and go to state 43
    split                          shift and go to state 47
    include                        shift and go to state 48
    reverse                        shift and go to state 49

state 22

    (18) unless -> UNLESS . comparacion codigo END
    (53) comparacion -> . expresion operadorComp expresion
    (54) comparacion -> . PIZQ expresion PDER operadorComp expresion
    (55) comparacion -> . PIZQ expresion operadorComp expresion PDER
    (46) expresion -> . valor
    (51) expresion -> . valor operadorMat expresion
    (52) expresion -> . PIZQ valor operadorMat expresion PDER
    (70) valor -> . ENTERO
    (71) valor -> . variables
    (72) valor -> . CADENA
    (73) valor -> . HASH
    (74) valor -> . ARRAY
    (75) valor -> . split
    (76) valor -> . include
    (77) valor -> . reverse
    (78) variables -> . VARIABLE_LOCAL
    (79) variables -> . VARIABLE_GLOBAL
    (80) variables -> . VARIABLE_OBJETO
    (81) variables -> . VARIABLE_CLASE
    (82) variables -> . CONSTANTE
    (23) split -> . CADENA PUNTO SPLIT PIZQ valorsplit PDER
    (30) include -> . CADENA PUNTO INCLUDE INTERROGACION CADENA
    (22) reverse -> . CADENA PUNTO REVERSE

    PIZQ            shift and go to state 40
    ENTERO          shift and go to state 42
    CADENA          shift and go to state 44
    HASH            shift and go to state 45
    ARRAY           shift and go to state 46
    VARIABLE_LOCAL  shift and go to state 29
    VARIABLE_GLOBAL shift and go to state 30
    VARIABLE_OBJETO shift and go to state 31
    VARIABLE_CLASE  shift and go to state 32
    CONSTANTE       shift and go to state 33

    comparacion                    shift and go to state 52
    expresion                      shift and go to state 39
    valor                          shift and go to state 41
    variables                      shift and go to state 43
    split                          shift and go to state 47
    include                        shift and go to state 48
    reverse                        shift and go to state 49

state 23

    (86) comentarios -> COMENTARIO .

    WHILE           reduce using rule 86 (comentarios -> COMENTARIO .)
    FOR             reduce using rule 86 (comentarios -> COMENTARIO .)
    PUTS            reduce using rule 86 (comentarios -> COMENTARIO .)
    UNLESS          reduce using rule 86 (comentarios -> COMENTARIO .)
    COMENTARIO      reduce using rule 86 (comentarios -> COMENTARIO .)
    IF              reduce using rule 86 (comentarios -> COMENTARIO .)
    CASE            reduce using rule 86 (comentarios -> COMENTARIO .)
    BEGIN           reduce using rule 86 (comentarios -> COMENTARIO .)
    FUNCION         reduce using rule 86 (comentarios -> COMENTARIO .)
    CADENA          reduce using rule 86 (comentarios -> COMENTARIO .)
    VARIABLE_LOCAL  reduce using rule 86 (comentarios -> COMENTARIO .)
    VARIABLE_GLOBAL reduce using rule 86 (comentarios -> COMENTARIO .)
    VARIABLE_OBJETO reduce using rule 86 (comentarios -> COMENTARIO .)
    VARIABLE_CLASE  reduce using rule 86 (comentarios -> COMENTARIO .)
    CONSTANTE       reduce using rule 86 (comentarios -> COMENTARIO .)
    $end            reduce using rule 86 (comentarios -> COMENTARIO .)
    END             reduce using rule 86 (comentarios -> COMENTARIO .)
    BREAK           reduce using rule 86 (comentarios -> COMENTARIO .)
    WHEN            reduce using rule 86 (comentarios -> COMENTARIO .)
    ELSE            reduce using rule 86 (comentarios -> COMENTARIO .)


state 24

    (83) sentenciaIf -> IF . comparaciones codigo finalIf
    (56) comparaciones -> . comparacion
    (57) comparaciones -> . sentenciaAND
    (58) comparaciones -> . sentenciaOR
    (53) comparacion -> . expresion operadorComp expresion
    (54) comparacion -> . PIZQ expresion PDER operadorComp expresion
    (55) comparacion -> . PIZQ expresion operadorComp expresion PDER
    (36) sentenciaAND -> . comparacion AND comparacion
    (37) sentenciaOR -> . comparacion OR comparacion
    (46) expresion -> . valor
    (51) expresion -> . valor operadorMat expresion
    (52) expresion -> . PIZQ valor operadorMat expresion PDER
    (70) valor -> . ENTERO
    (71) valor -> . variables
    (72) valor -> . CADENA
    (73) valor -> . HASH
    (74) valor -> . ARRAY
    (75) valor -> . split
    (76) valor -> . include
    (77) valor -> . reverse
    (78) variables -> . VARIABLE_LOCAL
    (79) variables -> . VARIABLE_GLOBAL
    (80) variables -> . VARIABLE_OBJETO
    (81) variables -> . VARIABLE_CLASE
    (82) variables -> . CONSTANTE
    (23) split -> . CADENA PUNTO SPLIT PIZQ valorsplit PDER
    (30) include -> . CADENA PUNTO INCLUDE INTERROGACION CADENA
    (22) reverse -> . CADENA PUNTO REVERSE

    PIZQ            shift and go to state 40
    ENTERO          shift and go to state 42
    CADENA          shift and go to state 44
    HASH            shift and go to state 45
    ARRAY           shift and go to state 46
    VARIABLE_LOCAL  shift and go to state 29
    VARIABLE_GLOBAL shift and go to state 30
    VARIABLE_OBJETO shift and go to state 31
    VARIABLE_CLASE  shift and go to state 32
    CONSTANTE       shift and go to state 33

    comparaciones                  shift and go to state 53
    comparacion                    shift and go to state 54
    sentenciaAND                   shift and go to state 55
    sentenciaOR                    shift and go to state 56
    expresion                      shift and go to state 39
    valor                          shift and go to state 41
    variables                      shift and go to state 43
    split                          shift and go to state 47
    include                        shift and go to state 48
    reverse                        shift and go to state 49

state 25

    (33) sentenciaCASE -> CASE . variables sentenciaWhens ELSE codigo END
    (78) variables -> . VARIABLE_LOCAL
    (79) variables -> . VARIABLE_GLOBAL
    (80) variables -> . VARIABLE_OBJETO
    (81) variables -> . VARIABLE_CLASE
    (82) variables -> . CONSTANTE

    VARIABLE_LOCAL  shift and go to state 29
    VARIABLE_GLOBAL shift and go to state 30
    VARIABLE_OBJETO shift and go to state 31
    VARIABLE_CLASE  shift and go to state 32
    CONSTANTE       shift and go to state 33

    variables                      shift and go to state 57

state 26

    (23) split -> CADENA . PUNTO SPLIT PIZQ valorsplit PDER

    PUNTO           shift and go to state 58


state 27

    (44) sentenciaBegin -> BEGIN . codigo END
    (1) codigo -> . algoritmo
    (2) codigo -> . algoritmo codigo
    (3) algoritmo -> . asignacion
    (4) algoritmo -> . sentenciaWHILE
    (5) algoritmo -> . sentenciaFOR
    (6) algoritmo -> . puts
    (7) algoritmo -> . unless
    (8) algoritmo -> . comentarios
    (9) algoritmo -> . sentenciaIf
    (10) algoritmo -> . sentenciaCASE
    (11) algoritmo -> . slicing
    (12) algoritmo -> . sentenciaBegin
    (13) algoritmo -> . sentenciaFuncion
    (14) algoritmo -> . split
    (15) algoritmo -> . push
    (16) algoritmo -> . append
    (17) algoritmo -> . pop
    (45) asignacion -> . variables IGUAL expresion
    (32) sentenciaWHILE -> . WHILE comparacion DO codigo END
    (19) sentenciaFOR -> . FOR variables IN range DO codigo END
    (21) puts -> . PUTS valor
    (18) unless -> . UNLESS comparacion codigo END
    (86) comentarios -> . COMENTARIO
    (83) sentenciaIf -> . IF comparaciones codigo finalIf
    (33) sentenciaCASE -> . CASE variables sentenciaWhens ELSE codigo END
    (47) slicing -> . variables CIZQ ENTERO CDER
    (48) slicing -> . variables CIZQ ENTERO COMA ENTERO CDER
    (49) slicing -> . variables CIZQ RANGO CDER
    (50) slicing -> . variables CIZQ CADENA CDER
    (44) sentenciaBegin -> . BEGIN codigo END
    (31) sentenciaFuncion -> . FUNCION variables codigo END
    (23) split -> . CADENA PUNTO SPLIT PIZQ valorsplit PDER
    (24) push -> . variables PUNTO PUSH PIZQ valor PDER
    (25) append -> . variables PUNTO APPEND PIZQ valor PDER
    (26) pop -> . variables PUNTO POP PIZQ valor PDER
    (27) pop -> . variables PUNTO POP PIZQ PDER
    (78) variables -> . VARIABLE_LOCAL
    (79) variables -> . VARIABLE_GLOBAL
    (80) variables -> . VARIABLE_OBJETO
    (81) variables -> . VARIABLE_CLASE
    (82) variables -> . CONSTANTE

    WHILE           shift and go to state 19
    FOR             shift and go to state 20
    PUTS            shift and go to state 21
    UNLESS          shift and go to state 22
    COMENTARIO      shift and go to state 23
    IF              shift and go to state 24
    CASE            shift and go to state 25
    BEGIN           shift and go to state 27
    FUNCION         shift and go to state 28
    CADENA          shift and go to state 26
    VARIABLE_LOCAL  shift and go to state 29
    VARIABLE_GLOBAL shift and go to state 30
    VARIABLE_OBJETO shift and go to state 31
    VARIABLE_CLASE  shift and go to state 32
    CONSTANTE       shift and go to state 33

    codigo                         shift and go to state 59
    algoritmo                      shift and go to state 2
    asignacion                     shift and go to state 3
    sentenciaWHILE                 shift and go to state 4
    sentenciaFOR                   shift and go to state 5
    puts                           shift and go to state 6
    unless                         shift and go to state 7
    comentarios                    shift and go to state 8
    sentenciaIf                    shift and go to state 9
    sentenciaCASE                  shift and go to state 10
    slicing                        shift and go to state 11
    sentenciaBegin                 shift and go to state 12
    sentenciaFuncion               shift and go to state 13
    split                          shift and go to state 14
    push                           shift and go to state 15
    append                         shift and go to state 16
    pop                            shift and go to state 17
    variables                      shift and go to state 18

state 28

    (31) sentenciaFuncion -> FUNCION . variables codigo END
    (78) variables -> . VARIABLE_LOCAL
    (79) variables -> . VARIABLE_GLOBAL
    (80) variables -> . VARIABLE_OBJETO
    (81) variables -> . VARIABLE_CLASE
    (82) variables -> . CONSTANTE

    VARIABLE_LOCAL  shift and go to state 29
    VARIABLE_GLOBAL shift and go to state 30
    VARIABLE_OBJETO shift and go to state 31
    VARIABLE_CLASE  shift and go to state 32
    CONSTANTE       shift and go to state 33

    variables                      shift and go to state 60

state 29

    (78) variables -> VARIABLE_LOCAL .

    IGUAL           reduce using rule 78 (variables -> VARIABLE_LOCAL .)
    CIZQ            reduce using rule 78 (variables -> VARIABLE_LOCAL .)
    PUNTO           reduce using rule 78 (variables -> VARIABLE_LOCAL .)
    MAS             reduce using rule 78 (variables -> VARIABLE_LOCAL .)
    RESTA           reduce using rule 78 (variables -> VARIABLE_LOCAL .)
    PROD            reduce using rule 78 (variables -> VARIABLE_LOCAL .)
    DIVISION        reduce using rule 78 (variables -> VARIABLE_LOCAL .)
    POTENCIA        reduce using rule 78 (variables -> VARIABLE_LOCAL .)
    MAYOR           reduce using rule 78 (variables -> VARIABLE_LOCAL .)
    MENOR           reduce using rule 78 (variables -> VARIABLE_LOCAL .)
    COMP_IGUAL      reduce using rule 78 (variables -> VARIABLE_LOCAL .)
    DIFERENTE       reduce using rule 78 (variables -> VARIABLE_LOCAL .)
    IN              reduce using rule 78 (variables -> VARIABLE_LOCAL .)
    WHILE           reduce using rule 78 (variables -> VARIABLE_LOCAL .)
    FOR             reduce using rule 78 (variables -> VARIABLE_LOCAL .)
    PUTS            reduce using rule 78 (variables -> VARIABLE_LOCAL .)
    UNLESS          reduce using rule 78 (variables -> VARIABLE_LOCAL .)
    COMENTARIO      reduce using rule 78 (variables -> VARIABLE_LOCAL .)
    IF              reduce using rule 78 (variables -> VARIABLE_LOCAL .)
    CASE            reduce using rule 78 (variables -> VARIABLE_LOCAL .)
    BEGIN           reduce using rule 78 (variables -> VARIABLE_LOCAL .)
    FUNCION         reduce using rule 78 (variables -> VARIABLE_LOCAL .)
    CADENA          reduce using rule 78 (variables -> VARIABLE_LOCAL .)
    VARIABLE_LOCAL  reduce using rule 78 (variables -> VARIABLE_LOCAL .)
    VARIABLE_GLOBAL reduce using rule 78 (variables -> VARIABLE_LOCAL .)
    VARIABLE_OBJETO reduce using rule 78 (variables -> VARIABLE_LOCAL .)
    VARIABLE_CLASE  reduce using rule 78 (variables -> VARIABLE_LOCAL .)
    CONSTANTE       reduce using rule 78 (variables -> VARIABLE_LOCAL .)
    $end            reduce using rule 78 (variables -> VARIABLE_LOCAL .)
    END             reduce using rule 78 (variables -> VARIABLE_LOCAL .)
    BREAK           reduce using rule 78 (variables -> VARIABLE_LOCAL .)
    WHEN            reduce using rule 78 (variables -> VARIABLE_LOCAL .)
    ELSE            reduce using rule 78 (variables -> VARIABLE_LOCAL .)
    PDER            reduce using rule 78 (variables -> VARIABLE_LOCAL .)
    DO              reduce using rule 78 (variables -> VARIABLE_LOCAL .)
    AND             reduce using rule 78 (variables -> VARIABLE_LOCAL .)
    OR              reduce using rule 78 (variables -> VARIABLE_LOCAL .)
    THEN            reduce using rule 78 (variables -> VARIABLE_LOCAL .)


state 30

    (79) variables -> VARIABLE_GLOBAL .

    IGUAL           reduce using rule 79 (variables -> VARIABLE_GLOBAL .)
    CIZQ            reduce using rule 79 (variables -> VARIABLE_GLOBAL .)
    PUNTO           reduce using rule 79 (variables -> VARIABLE_GLOBAL .)
    MAS             reduce using rule 79 (variables -> VARIABLE_GLOBAL .)
    RESTA           reduce using rule 79 (variables -> VARIABLE_GLOBAL .)
    PROD            reduce using rule 79 (variables -> VARIABLE_GLOBAL .)
    DIVISION        reduce using rule 79 (variables -> VARIABLE_GLOBAL .)
    POTENCIA        reduce using rule 79 (variables -> VARIABLE_GLOBAL .)
    MAYOR           reduce using rule 79 (variables -> VARIABLE_GLOBAL .)
    MENOR           reduce using rule 79 (variables -> VARIABLE_GLOBAL .)
    COMP_IGUAL      reduce using rule 79 (variables -> VARIABLE_GLOBAL .)
    DIFERENTE       reduce using rule 79 (variables -> VARIABLE_GLOBAL .)
    IN              reduce using rule 79 (variables -> VARIABLE_GLOBAL .)
    WHILE           reduce using rule 79 (variables -> VARIABLE_GLOBAL .)
    FOR             reduce using rule 79 (variables -> VARIABLE_GLOBAL .)
    PUTS            reduce using rule 79 (variables -> VARIABLE_GLOBAL .)
    UNLESS          reduce using rule 79 (variables -> VARIABLE_GLOBAL .)
    COMENTARIO      reduce using rule 79 (variables -> VARIABLE_GLOBAL .)
    IF              reduce using rule 79 (variables -> VARIABLE_GLOBAL .)
    CASE            reduce using rule 79 (variables -> VARIABLE_GLOBAL .)
    BEGIN           reduce using rule 79 (variables -> VARIABLE_GLOBAL .)
    FUNCION         reduce using rule 79 (variables -> VARIABLE_GLOBAL .)
    CADENA          reduce using rule 79 (variables -> VARIABLE_GLOBAL .)
    VARIABLE_LOCAL  reduce using rule 79 (variables -> VARIABLE_GLOBAL .)
    VARIABLE_GLOBAL reduce using rule 79 (variables -> VARIABLE_GLOBAL .)
    VARIABLE_OBJETO reduce using rule 79 (variables -> VARIABLE_GLOBAL .)
    VARIABLE_CLASE  reduce using rule 79 (variables -> VARIABLE_GLOBAL .)
    CONSTANTE       reduce using rule 79 (variables -> VARIABLE_GLOBAL .)
    $end            reduce using rule 79 (variables -> VARIABLE_GLOBAL .)
    END             reduce using rule 79 (variables -> VARIABLE_GLOBAL .)
    BREAK           reduce using rule 79 (variables -> VARIABLE_GLOBAL .)
    WHEN            reduce using rule 79 (variables -> VARIABLE_GLOBAL .)
    ELSE            reduce using rule 79 (variables -> VARIABLE_GLOBAL .)
    PDER            reduce using rule 79 (variables -> VARIABLE_GLOBAL .)
    DO              reduce using rule 79 (variables -> VARIABLE_GLOBAL .)
    AND             reduce using rule 79 (variables -> VARIABLE_GLOBAL .)
    OR              reduce using rule 79 (variables -> VARIABLE_GLOBAL .)
    THEN            reduce using rule 79 (variables -> VARIABLE_GLOBAL .)


state 31

    (80) variables -> VARIABLE_OBJETO .

    IGUAL           reduce using rule 80 (variables -> VARIABLE_OBJETO .)
    CIZQ            reduce using rule 80 (variables -> VARIABLE_OBJETO .)
    PUNTO           reduce using rule 80 (variables -> VARIABLE_OBJETO .)
    MAS             reduce using rule 80 (variables -> VARIABLE_OBJETO .)
    RESTA           reduce using rule 80 (variables -> VARIABLE_OBJETO .)
    PROD            reduce using rule 80 (variables -> VARIABLE_OBJETO .)
    DIVISION        reduce using rule 80 (variables -> VARIABLE_OBJETO .)
    POTENCIA        reduce using rule 80 (variables -> VARIABLE_OBJETO .)
    MAYOR           reduce using rule 80 (variables -> VARIABLE_OBJETO .)
    MENOR           reduce using rule 80 (variables -> VARIABLE_OBJETO .)
    COMP_IGUAL      reduce using rule 80 (variables -> VARIABLE_OBJETO .)
    DIFERENTE       reduce using rule 80 (variables -> VARIABLE_OBJETO .)
    IN              reduce using rule 80 (variables -> VARIABLE_OBJETO .)
    WHILE           reduce using rule 80 (variables -> VARIABLE_OBJETO .)
    FOR             reduce using rule 80 (variables -> VARIABLE_OBJETO .)
    PUTS            reduce using rule 80 (variables -> VARIABLE_OBJETO .)
    UNLESS          reduce using rule 80 (variables -> VARIABLE_OBJETO .)
    COMENTARIO      reduce using rule 80 (variables -> VARIABLE_OBJETO .)
    IF              reduce using rule 80 (variables -> VARIABLE_OBJETO .)
    CASE            reduce using rule 80 (variables -> VARIABLE_OBJETO .)
    BEGIN           reduce using rule 80 (variables -> VARIABLE_OBJETO .)
    FUNCION         reduce using rule 80 (variables -> VARIABLE_OBJETO .)
    CADENA          reduce using rule 80 (variables -> VARIABLE_OBJETO .)
    VARIABLE_LOCAL  reduce using rule 80 (variables -> VARIABLE_OBJETO .)
    VARIABLE_GLOBAL reduce using rule 80 (variables -> VARIABLE_OBJETO .)
    VARIABLE_OBJETO reduce using rule 80 (variables -> VARIABLE_OBJETO .)
    VARIABLE_CLASE  reduce using rule 80 (variables -> VARIABLE_OBJETO .)
    CONSTANTE       reduce using rule 80 (variables -> VARIABLE_OBJETO .)
    $end            reduce using rule 80 (variables -> VARIABLE_OBJETO .)
    END             reduce using rule 80 (variables -> VARIABLE_OBJETO .)
    BREAK           reduce using rule 80 (variables -> VARIABLE_OBJETO .)
    WHEN            reduce using rule 80 (variables -> VARIABLE_OBJETO .)
    ELSE            reduce using rule 80 (variables -> VARIABLE_OBJETO .)
    PDER            reduce using rule 80 (variables -> VARIABLE_OBJETO .)
    DO              reduce using rule 80 (variables -> VARIABLE_OBJETO .)
    AND             reduce using rule 80 (variables -> VARIABLE_OBJETO .)
    OR              reduce using rule 80 (variables -> VARIABLE_OBJETO .)
    THEN            reduce using rule 80 (variables -> VARIABLE_OBJETO .)


state 32

    (81) variables -> VARIABLE_CLASE .

    IGUAL           reduce using rule 81 (variables -> VARIABLE_CLASE .)
    CIZQ            reduce using rule 81 (variables -> VARIABLE_CLASE .)
    PUNTO           reduce using rule 81 (variables -> VARIABLE_CLASE .)
    MAS             reduce using rule 81 (variables -> VARIABLE_CLASE .)
    RESTA           reduce using rule 81 (variables -> VARIABLE_CLASE .)
    PROD            reduce using rule 81 (variables -> VARIABLE_CLASE .)
    DIVISION        reduce using rule 81 (variables -> VARIABLE_CLASE .)
    POTENCIA        reduce using rule 81 (variables -> VARIABLE_CLASE .)
    MAYOR           reduce using rule 81 (variables -> VARIABLE_CLASE .)
    MENOR           reduce using rule 81 (variables -> VARIABLE_CLASE .)
    COMP_IGUAL      reduce using rule 81 (variables -> VARIABLE_CLASE .)
    DIFERENTE       reduce using rule 81 (variables -> VARIABLE_CLASE .)
    IN              reduce using rule 81 (variables -> VARIABLE_CLASE .)
    WHILE           reduce using rule 81 (variables -> VARIABLE_CLASE .)
    FOR             reduce using rule 81 (variables -> VARIABLE_CLASE .)
    PUTS            reduce using rule 81 (variables -> VARIABLE_CLASE .)
    UNLESS          reduce using rule 81 (variables -> VARIABLE_CLASE .)
    COMENTARIO      reduce using rule 81 (variables -> VARIABLE_CLASE .)
    IF              reduce using rule 81 (variables -> VARIABLE_CLASE .)
    CASE            reduce using rule 81 (variables -> VARIABLE_CLASE .)
    BEGIN           reduce using rule 81 (variables -> VARIABLE_CLASE .)
    FUNCION         reduce using rule 81 (variables -> VARIABLE_CLASE .)
    CADENA          reduce using rule 81 (variables -> VARIABLE_CLASE .)
    VARIABLE_LOCAL  reduce using rule 81 (variables -> VARIABLE_CLASE .)
    VARIABLE_GLOBAL reduce using rule 81 (variables -> VARIABLE_CLASE .)
    VARIABLE_OBJETO reduce using rule 81 (variables -> VARIABLE_CLASE .)
    VARIABLE_CLASE  reduce using rule 81 (variables -> VARIABLE_CLASE .)
    CONSTANTE       reduce using rule 81 (variables -> VARIABLE_CLASE .)
    $end            reduce using rule 81 (variables -> VARIABLE_CLASE .)
    END             reduce using rule 81 (variables -> VARIABLE_CLASE .)
    BREAK           reduce using rule 81 (variables -> VARIABLE_CLASE .)
    WHEN            reduce using rule 81 (variables -> VARIABLE_CLASE .)
    ELSE            reduce using rule 81 (variables -> VARIABLE_CLASE .)
    PDER            reduce using rule 81 (variables -> VARIABLE_CLASE .)
    DO              reduce using rule 81 (variables -> VARIABLE_CLASE .)
    AND             reduce using rule 81 (variables -> VARIABLE_CLASE .)
    OR              reduce using rule 81 (variables -> VARIABLE_CLASE .)
    THEN            reduce using rule 81 (variables -> VARIABLE_CLASE .)


state 33

    (82) variables -> CONSTANTE .

    IGUAL           reduce using rule 82 (variables -> CONSTANTE .)
    CIZQ            reduce using rule 82 (variables -> CONSTANTE .)
    PUNTO           reduce using rule 82 (variables -> CONSTANTE .)
    MAS             reduce using rule 82 (variables -> CONSTANTE .)
    RESTA           reduce using rule 82 (variables -> CONSTANTE .)
    PROD            reduce using rule 82 (variables -> CONSTANTE .)
    DIVISION        reduce using rule 82 (variables -> CONSTANTE .)
    POTENCIA        reduce using rule 82 (variables -> CONSTANTE .)
    MAYOR           reduce using rule 82 (variables -> CONSTANTE .)
    MENOR           reduce using rule 82 (variables -> CONSTANTE .)
    COMP_IGUAL      reduce using rule 82 (variables -> CONSTANTE .)
    DIFERENTE       reduce using rule 82 (variables -> CONSTANTE .)
    IN              reduce using rule 82 (variables -> CONSTANTE .)
    WHILE           reduce using rule 82 (variables -> CONSTANTE .)
    FOR             reduce using rule 82 (variables -> CONSTANTE .)
    PUTS            reduce using rule 82 (variables -> CONSTANTE .)
    UNLESS          reduce using rule 82 (variables -> CONSTANTE .)
    COMENTARIO      reduce using rule 82 (variables -> CONSTANTE .)
    IF              reduce using rule 82 (variables -> CONSTANTE .)
    CASE            reduce using rule 82 (variables -> CONSTANTE .)
    BEGIN           reduce using rule 82 (variables -> CONSTANTE .)
    FUNCION         reduce using rule 82 (variables -> CONSTANTE .)
    CADENA          reduce using rule 82 (variables -> CONSTANTE .)
    VARIABLE_LOCAL  reduce using rule 82 (variables -> CONSTANTE .)
    VARIABLE_GLOBAL reduce using rule 82 (variables -> CONSTANTE .)
    VARIABLE_OBJETO reduce using rule 82 (variables -> CONSTANTE .)
    VARIABLE_CLASE  reduce using rule 82 (variables -> CONSTANTE .)
    CONSTANTE       reduce using rule 82 (variables -> CONSTANTE .)
    $end            reduce using rule 82 (variables -> CONSTANTE .)
    END             reduce using rule 82 (variables -> CONSTANTE .)
    BREAK           reduce using rule 82 (variables -> CONSTANTE .)
    WHEN            reduce using rule 82 (variables -> CONSTANTE .)
    ELSE            reduce using rule 82 (variables -> CONSTANTE .)
    PDER            reduce using rule 82 (variables -> CONSTANTE .)
    DO              reduce using rule 82 (variables -> CONSTANTE .)
    AND             reduce using rule 82 (variables -> CONSTANTE .)
    OR              reduce using rule 82 (variables -> CONSTANTE .)
    THEN            reduce using rule 82 (variables -> CONSTANTE .)


state 34

    (2) codigo -> algoritmo codigo .

    $end            reduce using rule 2 (codigo -> algoritmo codigo .)
    END             reduce using rule 2 (codigo -> algoritmo codigo .)
    BREAK           reduce using rule 2 (codigo -> algoritmo codigo .)
    WHEN            reduce using rule 2 (codigo -> algoritmo codigo .)
    ELSE            reduce using rule 2 (codigo -> algoritmo codigo .)


state 35

    (45) asignacion -> variables IGUAL . expresion
    (46) expresion -> . valor
    (51) expresion -> . valor operadorMat expresion
    (52) expresion -> . PIZQ valor operadorMat expresion PDER
    (70) valor -> . ENTERO
    (71) valor -> . variables
    (72) valor -> . CADENA
    (73) valor -> . HASH
    (74) valor -> . ARRAY
    (75) valor -> . split
    (76) valor -> . include
    (77) valor -> . reverse
    (78) variables -> . VARIABLE_LOCAL
    (79) variables -> . VARIABLE_GLOBAL
    (80) variables -> . VARIABLE_OBJETO
    (81) variables -> . VARIABLE_CLASE
    (82) variables -> . CONSTANTE
    (23) split -> . CADENA PUNTO SPLIT PIZQ valorsplit PDER
    (30) include -> . CADENA PUNTO INCLUDE INTERROGACION CADENA
    (22) reverse -> . CADENA PUNTO REVERSE

    PIZQ            shift and go to state 62
    ENTERO          shift and go to state 42
    CADENA          shift and go to state 44
    HASH            shift and go to state 45
    ARRAY           shift and go to state 46
    VARIABLE_LOCAL  shift and go to state 29
    VARIABLE_GLOBAL shift and go to state 30
    VARIABLE_OBJETO shift and go to state 31
    VARIABLE_CLASE  shift and go to state 32
    CONSTANTE       shift and go to state 33

    variables                      shift and go to state 43
    expresion                      shift and go to state 61
    valor                          shift and go to state 41
    split                          shift and go to state 47
    include                        shift and go to state 48
    reverse                        shift and go to state 49

state 36

    (47) slicing -> variables CIZQ . ENTERO CDER
    (48) slicing -> variables CIZQ . ENTERO COMA ENTERO CDER
    (49) slicing -> variables CIZQ . RANGO CDER
    (50) slicing -> variables CIZQ . CADENA CDER

    ENTERO          shift and go to state 63
    RANGO           shift and go to state 64
    CADENA          shift and go to state 65


state 37

    (24) push -> variables PUNTO . PUSH PIZQ valor PDER
    (25) append -> variables PUNTO . APPEND PIZQ valor PDER
    (26) pop -> variables PUNTO . POP PIZQ valor PDER
    (27) pop -> variables PUNTO . POP PIZQ PDER

    PUSH            shift and go to state 66
    APPEND          shift and go to state 67
    POP             shift and go to state 68


state 38

    (32) sentenciaWHILE -> WHILE comparacion . DO codigo END

    DO              shift and go to state 69


state 39

    (53) comparacion -> expresion . operadorComp expresion
    (66) operadorComp -> . MAYOR
    (67) operadorComp -> . MENOR
    (68) operadorComp -> . COMP_IGUAL
    (69) operadorComp -> . DIFERENTE

    MAYOR           shift and go to state 71
    MENOR           shift and go to state 72
    COMP_IGUAL      shift and go to state 73
    DIFERENTE       shift and go to state 74

    operadorComp                   shift and go to state 70

state 40

    (54) comparacion -> PIZQ . expresion PDER operadorComp expresion
    (55) comparacion -> PIZQ . expresion operadorComp expresion PDER
    (52) expresion -> PIZQ . valor operadorMat expresion PDER
    (46) expresion -> . valor
    (51) expresion -> . valor operadorMat expresion
    (52) expresion -> . PIZQ valor operadorMat expresion PDER
    (70) valor -> . ENTERO
    (71) valor -> . variables
    (72) valor -> . CADENA
    (73) valor -> . HASH
    (74) valor -> . ARRAY
    (75) valor -> . split
    (76) valor -> . include
    (77) valor -> . reverse
    (78) variables -> . VARIABLE_LOCAL
    (79) variables -> . VARIABLE_GLOBAL
    (80) variables -> . VARIABLE_OBJETO
    (81) variables -> . VARIABLE_CLASE
    (82) variables -> . CONSTANTE
    (23) split -> . CADENA PUNTO SPLIT PIZQ valorsplit PDER
    (30) include -> . CADENA PUNTO INCLUDE INTERROGACION CADENA
    (22) reverse -> . CADENA PUNTO REVERSE

    PIZQ            shift and go to state 62
    ENTERO          shift and go to state 42
    CADENA          shift and go to state 44
    HASH            shift and go to state 45
    ARRAY           shift and go to state 46
    VARIABLE_LOCAL  shift and go to state 29
    VARIABLE_GLOBAL shift and go to state 30
    VARIABLE_OBJETO shift and go to state 31
    VARIABLE_CLASE  shift and go to state 32
    CONSTANTE       shift and go to state 33

    expresion                      shift and go to state 75
    valor                          shift and go to state 76
    variables                      shift and go to state 43
    split                          shift and go to state 47
    include                        shift and go to state 48
    reverse                        shift and go to state 49

state 41

    (46) expresion -> valor .
    (51) expresion -> valor . operadorMat expresion
    (61) operadorMat -> . MAS
    (62) operadorMat -> . RESTA
    (63) operadorMat -> . PROD
    (64) operadorMat -> . DIVISION
    (65) operadorMat -> . POTENCIA

    MAYOR           reduce using rule 46 (expresion -> valor .)
    MENOR           reduce using rule 46 (expresion -> valor .)
    COMP_IGUAL      reduce using rule 46 (expresion -> valor .)
    DIFERENTE       reduce using rule 46 (expresion -> valor .)
    WHILE           reduce using rule 46 (expresion -> valor .)
    FOR             reduce using rule 46 (expresion -> valor .)
    PUTS            reduce using rule 46 (expresion -> valor .)
    UNLESS          reduce using rule 46 (expresion -> valor .)
    COMENTARIO      reduce using rule 46 (expresion -> valor .)
    IF              reduce using rule 46 (expresion -> valor .)
    CASE            reduce using rule 46 (expresion -> valor .)
    BEGIN           reduce using rule 46 (expresion -> valor .)
    FUNCION         reduce using rule 46 (expresion -> valor .)
    CADENA          reduce using rule 46 (expresion -> valor .)
    VARIABLE_LOCAL  reduce using rule 46 (expresion -> valor .)
    VARIABLE_GLOBAL reduce using rule 46 (expresion -> valor .)
    VARIABLE_OBJETO reduce using rule 46 (expresion -> valor .)
    VARIABLE_CLASE  reduce using rule 46 (expresion -> valor .)
    CONSTANTE       reduce using rule 46 (expresion -> valor .)
    $end            reduce using rule 46 (expresion -> valor .)
    END             reduce using rule 46 (expresion -> valor .)
    BREAK           reduce using rule 46 (expresion -> valor .)
    WHEN            reduce using rule 46 (expresion -> valor .)
    ELSE            reduce using rule 46 (expresion -> valor .)
    DO              reduce using rule 46 (expresion -> valor .)
    AND             reduce using rule 46 (expresion -> valor .)
    OR              reduce using rule 46 (expresion -> valor .)
    PDER            reduce using rule 46 (expresion -> valor .)
    MAS             shift and go to state 78
    RESTA           shift and go to state 79
    PROD            shift and go to state 80
    DIVISION        shift and go to state 81
    POTENCIA        shift and go to state 82

    operadorMat                    shift and go to state 77

state 42

    (70) valor -> ENTERO .

    MAS             reduce using rule 70 (valor -> ENTERO .)
    RESTA           reduce using rule 70 (valor -> ENTERO .)
    PROD            reduce using rule 70 (valor -> ENTERO .)
    DIVISION        reduce using rule 70 (valor -> ENTERO .)
    POTENCIA        reduce using rule 70 (valor -> ENTERO .)
    MAYOR           reduce using rule 70 (valor -> ENTERO .)
    MENOR           reduce using rule 70 (valor -> ENTERO .)
    COMP_IGUAL      reduce using rule 70 (valor -> ENTERO .)
    DIFERENTE       reduce using rule 70 (valor -> ENTERO .)
    WHILE           reduce using rule 70 (valor -> ENTERO .)
    FOR             reduce using rule 70 (valor -> ENTERO .)
    PUTS            reduce using rule 70 (valor -> ENTERO .)
    UNLESS          reduce using rule 70 (valor -> ENTERO .)
    COMENTARIO      reduce using rule 70 (valor -> ENTERO .)
    IF              reduce using rule 70 (valor -> ENTERO .)
    CASE            reduce using rule 70 (valor -> ENTERO .)
    BEGIN           reduce using rule 70 (valor -> ENTERO .)
    FUNCION         reduce using rule 70 (valor -> ENTERO .)
    CADENA          reduce using rule 70 (valor -> ENTERO .)
    VARIABLE_LOCAL  reduce using rule 70 (valor -> ENTERO .)
    VARIABLE_GLOBAL reduce using rule 70 (valor -> ENTERO .)
    VARIABLE_OBJETO reduce using rule 70 (valor -> ENTERO .)
    VARIABLE_CLASE  reduce using rule 70 (valor -> ENTERO .)
    CONSTANTE       reduce using rule 70 (valor -> ENTERO .)
    $end            reduce using rule 70 (valor -> ENTERO .)
    END             reduce using rule 70 (valor -> ENTERO .)
    BREAK           reduce using rule 70 (valor -> ENTERO .)
    WHEN            reduce using rule 70 (valor -> ENTERO .)
    ELSE            reduce using rule 70 (valor -> ENTERO .)
    PDER            reduce using rule 70 (valor -> ENTERO .)
    DO              reduce using rule 70 (valor -> ENTERO .)
    AND             reduce using rule 70 (valor -> ENTERO .)
    OR              reduce using rule 70 (valor -> ENTERO .)


state 43

    (71) valor -> variables .

    MAS             reduce using rule 71 (valor -> variables .)
    RESTA           reduce using rule 71 (valor -> variables .)
    PROD            reduce using rule 71 (valor -> variables .)
    DIVISION        reduce using rule 71 (valor -> variables .)
    POTENCIA        reduce using rule 71 (valor -> variables .)
    MAYOR           reduce using rule 71 (valor -> variables .)
    MENOR           reduce using rule 71 (valor -> variables .)
    COMP_IGUAL      reduce using rule 71 (valor -> variables .)
    DIFERENTE       reduce using rule 71 (valor -> variables .)
    WHILE           reduce using rule 71 (valor -> variables .)
    FOR             reduce using rule 71 (valor -> variables .)
    PUTS            reduce using rule 71 (valor -> variables .)
    UNLESS          reduce using rule 71 (valor -> variables .)
    COMENTARIO      reduce using rule 71 (valor -> variables .)
    IF              reduce using rule 71 (valor -> variables .)
    CASE            reduce using rule 71 (valor -> variables .)
    BEGIN           reduce using rule 71 (valor -> variables .)
    FUNCION         reduce using rule 71 (valor -> variables .)
    CADENA          reduce using rule 71 (valor -> variables .)
    VARIABLE_LOCAL  reduce using rule 71 (valor -> variables .)
    VARIABLE_GLOBAL reduce using rule 71 (valor -> variables .)
    VARIABLE_OBJETO reduce using rule 71 (valor -> variables .)
    VARIABLE_CLASE  reduce using rule 71 (valor -> variables .)
    CONSTANTE       reduce using rule 71 (valor -> variables .)
    $end            reduce using rule 71 (valor -> variables .)
    END             reduce using rule 71 (valor -> variables .)
    BREAK           reduce using rule 71 (valor -> variables .)
    WHEN            reduce using rule 71 (valor -> variables .)
    ELSE            reduce using rule 71 (valor -> variables .)
    PDER            reduce using rule 71 (valor -> variables .)
    DO              reduce using rule 71 (valor -> variables .)
    AND             reduce using rule 71 (valor -> variables .)
    OR              reduce using rule 71 (valor -> variables .)


state 44

    (72) valor -> CADENA .
    (23) split -> CADENA . PUNTO SPLIT PIZQ valorsplit PDER
    (30) include -> CADENA . PUNTO INCLUDE INTERROGACION CADENA
    (22) reverse -> CADENA . PUNTO REVERSE

    MAS             reduce using rule 72 (valor -> CADENA .)
    RESTA           reduce using rule 72 (valor -> CADENA .)
    PROD            reduce using rule 72 (valor -> CADENA .)
    DIVISION        reduce using rule 72 (valor -> CADENA .)
    POTENCIA        reduce using rule 72 (valor -> CADENA .)
    MAYOR           reduce using rule 72 (valor -> CADENA .)
    MENOR           reduce using rule 72 (valor -> CADENA .)
    COMP_IGUAL      reduce using rule 72 (valor -> CADENA .)
    DIFERENTE       reduce using rule 72 (valor -> CADENA .)
    WHILE           reduce using rule 72 (valor -> CADENA .)
    FOR             reduce using rule 72 (valor -> CADENA .)
    PUTS            reduce using rule 72 (valor -> CADENA .)
    UNLESS          reduce using rule 72 (valor -> CADENA .)
    COMENTARIO      reduce using rule 72 (valor -> CADENA .)
    IF              reduce using rule 72 (valor -> CADENA .)
    CASE            reduce using rule 72 (valor -> CADENA .)
    BEGIN           reduce using rule 72 (valor -> CADENA .)
    FUNCION         reduce using rule 72 (valor -> CADENA .)
    CADENA          reduce using rule 72 (valor -> CADENA .)
    VARIABLE_LOCAL  reduce using rule 72 (valor -> CADENA .)
    VARIABLE_GLOBAL reduce using rule 72 (valor -> CADENA .)
    VARIABLE_OBJETO reduce using rule 72 (valor -> CADENA .)
    VARIABLE_CLASE  reduce using rule 72 (valor -> CADENA .)
    CONSTANTE       reduce using rule 72 (valor -> CADENA .)
    $end            reduce using rule 72 (valor -> CADENA .)
    END             reduce using rule 72 (valor -> CADENA .)
    BREAK           reduce using rule 72 (valor -> CADENA .)
    WHEN            reduce using rule 72 (valor -> CADENA .)
    ELSE            reduce using rule 72 (valor -> CADENA .)
    PDER            reduce using rule 72 (valor -> CADENA .)
    DO              reduce using rule 72 (valor -> CADENA .)
    AND             reduce using rule 72 (valor -> CADENA .)
    OR              reduce using rule 72 (valor -> CADENA .)
    PUNTO           shift and go to state 83


state 45

    (73) valor -> HASH .

    MAS             reduce using rule 73 (valor -> HASH .)
    RESTA           reduce using rule 73 (valor -> HASH .)
    PROD            reduce using rule 73 (valor -> HASH .)
    DIVISION        reduce using rule 73 (valor -> HASH .)
    POTENCIA        reduce using rule 73 (valor -> HASH .)
    MAYOR           reduce using rule 73 (valor -> HASH .)
    MENOR           reduce using rule 73 (valor -> HASH .)
    COMP_IGUAL      reduce using rule 73 (valor -> HASH .)
    DIFERENTE       reduce using rule 73 (valor -> HASH .)
    WHILE           reduce using rule 73 (valor -> HASH .)
    FOR             reduce using rule 73 (valor -> HASH .)
    PUTS            reduce using rule 73 (valor -> HASH .)
    UNLESS          reduce using rule 73 (valor -> HASH .)
    COMENTARIO      reduce using rule 73 (valor -> HASH .)
    IF              reduce using rule 73 (valor -> HASH .)
    CASE            reduce using rule 73 (valor -> HASH .)
    BEGIN           reduce using rule 73 (valor -> HASH .)
    FUNCION         reduce using rule 73 (valor -> HASH .)
    CADENA          reduce using rule 73 (valor -> HASH .)
    VARIABLE_LOCAL  reduce using rule 73 (valor -> HASH .)
    VARIABLE_GLOBAL reduce using rule 73 (valor -> HASH .)
    VARIABLE_OBJETO reduce using rule 73 (valor -> HASH .)
    VARIABLE_CLASE  reduce using rule 73 (valor -> HASH .)
    CONSTANTE       reduce using rule 73 (valor -> HASH .)
    $end            reduce using rule 73 (valor -> HASH .)
    END             reduce using rule 73 (valor -> HASH .)
    BREAK           reduce using rule 73 (valor -> HASH .)
    WHEN            reduce using rule 73 (valor -> HASH .)
    ELSE            reduce using rule 73 (valor -> HASH .)
    PDER            reduce using rule 73 (valor -> HASH .)
    DO              reduce using rule 73 (valor -> HASH .)
    AND             reduce using rule 73 (valor -> HASH .)
    OR              reduce using rule 73 (valor -> HASH .)


state 46

    (74) valor -> ARRAY .

    MAS             reduce using rule 74 (valor -> ARRAY .)
    RESTA           reduce using rule 74 (valor -> ARRAY .)
    PROD            reduce using rule 74 (valor -> ARRAY .)
    DIVISION        reduce using rule 74 (valor -> ARRAY .)
    POTENCIA        reduce using rule 74 (valor -> ARRAY .)
    MAYOR           reduce using rule 74 (valor -> ARRAY .)
    MENOR           reduce using rule 74 (valor -> ARRAY .)
    COMP_IGUAL      reduce using rule 74 (valor -> ARRAY .)
    DIFERENTE       reduce using rule 74 (valor -> ARRAY .)
    WHILE           reduce using rule 74 (valor -> ARRAY .)
    FOR             reduce using rule 74 (valor -> ARRAY .)
    PUTS            reduce using rule 74 (valor -> ARRAY .)
    UNLESS          reduce using rule 74 (valor -> ARRAY .)
    COMENTARIO      reduce using rule 74 (valor -> ARRAY .)
    IF              reduce using rule 74 (valor -> ARRAY .)
    CASE            reduce using rule 74 (valor -> ARRAY .)
    BEGIN           reduce using rule 74 (valor -> ARRAY .)
    FUNCION         reduce using rule 74 (valor -> ARRAY .)
    CADENA          reduce using rule 74 (valor -> ARRAY .)
    VARIABLE_LOCAL  reduce using rule 74 (valor -> ARRAY .)
    VARIABLE_GLOBAL reduce using rule 74 (valor -> ARRAY .)
    VARIABLE_OBJETO reduce using rule 74 (valor -> ARRAY .)
    VARIABLE_CLASE  reduce using rule 74 (valor -> ARRAY .)
    CONSTANTE       reduce using rule 74 (valor -> ARRAY .)
    $end            reduce using rule 74 (valor -> ARRAY .)
    END             reduce using rule 74 (valor -> ARRAY .)
    BREAK           reduce using rule 74 (valor -> ARRAY .)
    WHEN            reduce using rule 74 (valor -> ARRAY .)
    ELSE            reduce using rule 74 (valor -> ARRAY .)
    PDER            reduce using rule 74 (valor -> ARRAY .)
    DO              reduce using rule 74 (valor -> ARRAY .)
    AND             reduce using rule 74 (valor -> ARRAY .)
    OR              reduce using rule 74 (valor -> ARRAY .)


state 47

    (75) valor -> split .

    MAS             reduce using rule 75 (valor -> split .)
    RESTA           reduce using rule 75 (valor -> split .)
    PROD            reduce using rule 75 (valor -> split .)
    DIVISION        reduce using rule 75 (valor -> split .)
    POTENCIA        reduce using rule 75 (valor -> split .)
    MAYOR           reduce using rule 75 (valor -> split .)
    MENOR           reduce using rule 75 (valor -> split .)
    COMP_IGUAL      reduce using rule 75 (valor -> split .)
    DIFERENTE       reduce using rule 75 (valor -> split .)
    WHILE           reduce using rule 75 (valor -> split .)
    FOR             reduce using rule 75 (valor -> split .)
    PUTS            reduce using rule 75 (valor -> split .)
    UNLESS          reduce using rule 75 (valor -> split .)
    COMENTARIO      reduce using rule 75 (valor -> split .)
    IF              reduce using rule 75 (valor -> split .)
    CASE            reduce using rule 75 (valor -> split .)
    BEGIN           reduce using rule 75 (valor -> split .)
    FUNCION         reduce using rule 75 (valor -> split .)
    CADENA          reduce using rule 75 (valor -> split .)
    VARIABLE_LOCAL  reduce using rule 75 (valor -> split .)
    VARIABLE_GLOBAL reduce using rule 75 (valor -> split .)
    VARIABLE_OBJETO reduce using rule 75 (valor -> split .)
    VARIABLE_CLASE  reduce using rule 75 (valor -> split .)
    CONSTANTE       reduce using rule 75 (valor -> split .)
    $end            reduce using rule 75 (valor -> split .)
    END             reduce using rule 75 (valor -> split .)
    BREAK           reduce using rule 75 (valor -> split .)
    WHEN            reduce using rule 75 (valor -> split .)
    ELSE            reduce using rule 75 (valor -> split .)
    PDER            reduce using rule 75 (valor -> split .)
    DO              reduce using rule 75 (valor -> split .)
    AND             reduce using rule 75 (valor -> split .)
    OR              reduce using rule 75 (valor -> split .)


state 48

    (76) valor -> include .

    MAS             reduce using rule 76 (valor -> include .)
    RESTA           reduce using rule 76 (valor -> include .)
    PROD            reduce using rule 76 (valor -> include .)
    DIVISION        reduce using rule 76 (valor -> include .)
    POTENCIA        reduce using rule 76 (valor -> include .)
    MAYOR           reduce using rule 76 (valor -> include .)
    MENOR           reduce using rule 76 (valor -> include .)
    COMP_IGUAL      reduce using rule 76 (valor -> include .)
    DIFERENTE       reduce using rule 76 (valor -> include .)
    WHILE           reduce using rule 76 (valor -> include .)
    FOR             reduce using rule 76 (valor -> include .)
    PUTS            reduce using rule 76 (valor -> include .)
    UNLESS          reduce using rule 76 (valor -> include .)
    COMENTARIO      reduce using rule 76 (valor -> include .)
    IF              reduce using rule 76 (valor -> include .)
    CASE            reduce using rule 76 (valor -> include .)
    BEGIN           reduce using rule 76 (valor -> include .)
    FUNCION         reduce using rule 76 (valor -> include .)
    CADENA          reduce using rule 76 (valor -> include .)
    VARIABLE_LOCAL  reduce using rule 76 (valor -> include .)
    VARIABLE_GLOBAL reduce using rule 76 (valor -> include .)
    VARIABLE_OBJETO reduce using rule 76 (valor -> include .)
    VARIABLE_CLASE  reduce using rule 76 (valor -> include .)
    CONSTANTE       reduce using rule 76 (valor -> include .)
    $end            reduce using rule 76 (valor -> include .)
    END             reduce using rule 76 (valor -> include .)
    BREAK           reduce using rule 76 (valor -> include .)
    WHEN            reduce using rule 76 (valor -> include .)
    ELSE            reduce using rule 76 (valor -> include .)
    PDER            reduce using rule 76 (valor -> include .)
    DO              reduce using rule 76 (valor -> include .)
    AND             reduce using rule 76 (valor -> include .)
    OR              reduce using rule 76 (valor -> include .)


state 49

    (77) valor -> reverse .

    MAS             reduce using rule 77 (valor -> reverse .)
    RESTA           reduce using rule 77 (valor -> reverse .)
    PROD            reduce using rule 77 (valor -> reverse .)
    DIVISION        reduce using rule 77 (valor -> reverse .)
    POTENCIA        reduce using rule 77 (valor -> reverse .)
    MAYOR           reduce using rule 77 (valor -> reverse .)
    MENOR           reduce using rule 77 (valor -> reverse .)
    COMP_IGUAL      reduce using rule 77 (valor -> reverse .)
    DIFERENTE       reduce using rule 77 (valor -> reverse .)
    WHILE           reduce using rule 77 (valor -> reverse .)
    FOR             reduce using rule 77 (valor -> reverse .)
    PUTS            reduce using rule 77 (valor -> reverse .)
    UNLESS          reduce using rule 77 (valor -> reverse .)
    COMENTARIO      reduce using rule 77 (valor -> reverse .)
    IF              reduce using rule 77 (valor -> reverse .)
    CASE            reduce using rule 77 (valor -> reverse .)
    BEGIN           reduce using rule 77 (valor -> reverse .)
    FUNCION         reduce using rule 77 (valor -> reverse .)
    CADENA          reduce using rule 77 (valor -> reverse .)
    VARIABLE_LOCAL  reduce using rule 77 (valor -> reverse .)
    VARIABLE_GLOBAL reduce using rule 77 (valor -> reverse .)
    VARIABLE_OBJETO reduce using rule 77 (valor -> reverse .)
    VARIABLE_CLASE  reduce using rule 77 (valor -> reverse .)
    CONSTANTE       reduce using rule 77 (valor -> reverse .)
    $end            reduce using rule 77 (valor -> reverse .)
    END             reduce using rule 77 (valor -> reverse .)
    BREAK           reduce using rule 77 (valor -> reverse .)
    WHEN            reduce using rule 77 (valor -> reverse .)
    ELSE            reduce using rule 77 (valor -> reverse .)
    PDER            reduce using rule 77 (valor -> reverse .)
    DO              reduce using rule 77 (valor -> reverse .)
    AND             reduce using rule 77 (valor -> reverse .)
    OR              reduce using rule 77 (valor -> reverse .)


state 50

    (19) sentenciaFOR -> FOR variables . IN range DO codigo END

    IN              shift and go to state 84


state 51

    (21) puts -> PUTS valor .

    WHILE           reduce using rule 21 (puts -> PUTS valor .)
    FOR             reduce using rule 21 (puts -> PUTS valor .)
    PUTS            reduce using rule 21 (puts -> PUTS valor .)
    UNLESS          reduce using rule 21 (puts -> PUTS valor .)
    COMENTARIO      reduce using rule 21 (puts -> PUTS valor .)
    IF              reduce using rule 21 (puts -> PUTS valor .)
    CASE            reduce using rule 21 (puts -> PUTS valor .)
    BEGIN           reduce using rule 21 (puts -> PUTS valor .)
    FUNCION         reduce using rule 21 (puts -> PUTS valor .)
    CADENA          reduce using rule 21 (puts -> PUTS valor .)
    VARIABLE_LOCAL  reduce using rule 21 (puts -> PUTS valor .)
    VARIABLE_GLOBAL reduce using rule 21 (puts -> PUTS valor .)
    VARIABLE_OBJETO reduce using rule 21 (puts -> PUTS valor .)
    VARIABLE_CLASE  reduce using rule 21 (puts -> PUTS valor .)
    CONSTANTE       reduce using rule 21 (puts -> PUTS valor .)
    $end            reduce using rule 21 (puts -> PUTS valor .)
    END             reduce using rule 21 (puts -> PUTS valor .)
    BREAK           reduce using rule 21 (puts -> PUTS valor .)
    WHEN            reduce using rule 21 (puts -> PUTS valor .)
    ELSE            reduce using rule 21 (puts -> PUTS valor .)


state 52

    (18) unless -> UNLESS comparacion . codigo END
    (1) codigo -> . algoritmo
    (2) codigo -> . algoritmo codigo
    (3) algoritmo -> . asignacion
    (4) algoritmo -> . sentenciaWHILE
    (5) algoritmo -> . sentenciaFOR
    (6) algoritmo -> . puts
    (7) algoritmo -> . unless
    (8) algoritmo -> . comentarios
    (9) algoritmo -> . sentenciaIf
    (10) algoritmo -> . sentenciaCASE
    (11) algoritmo -> . slicing
    (12) algoritmo -> . sentenciaBegin
    (13) algoritmo -> . sentenciaFuncion
    (14) algoritmo -> . split
    (15) algoritmo -> . push
    (16) algoritmo -> . append
    (17) algoritmo -> . pop
    (45) asignacion -> . variables IGUAL expresion
    (32) sentenciaWHILE -> . WHILE comparacion DO codigo END
    (19) sentenciaFOR -> . FOR variables IN range DO codigo END
    (21) puts -> . PUTS valor
    (18) unless -> . UNLESS comparacion codigo END
    (86) comentarios -> . COMENTARIO
    (83) sentenciaIf -> . IF comparaciones codigo finalIf
    (33) sentenciaCASE -> . CASE variables sentenciaWhens ELSE codigo END
    (47) slicing -> . variables CIZQ ENTERO CDER
    (48) slicing -> . variables CIZQ ENTERO COMA ENTERO CDER
    (49) slicing -> . variables CIZQ RANGO CDER
    (50) slicing -> . variables CIZQ CADENA CDER
    (44) sentenciaBegin -> . BEGIN codigo END
    (31) sentenciaFuncion -> . FUNCION variables codigo END
    (23) split -> . CADENA PUNTO SPLIT PIZQ valorsplit PDER
    (24) push -> . variables PUNTO PUSH PIZQ valor PDER
    (25) append -> . variables PUNTO APPEND PIZQ valor PDER
    (26) pop -> . variables PUNTO POP PIZQ valor PDER
    (27) pop -> . variables PUNTO POP PIZQ PDER
    (78) variables -> . VARIABLE_LOCAL
    (79) variables -> . VARIABLE_GLOBAL
    (80) variables -> . VARIABLE_OBJETO
    (81) variables -> . VARIABLE_CLASE
    (82) variables -> . CONSTANTE

    WHILE           shift and go to state 19
    FOR             shift and go to state 20
    PUTS            shift and go to state 21
    UNLESS          shift and go to state 22
    COMENTARIO      shift and go to state 23
    IF              shift and go to state 24
    CASE            shift and go to state 25
    BEGIN           shift and go to state 27
    FUNCION         shift and go to state 28
    CADENA          shift and go to state 26
    VARIABLE_LOCAL  shift and go to state 29
    VARIABLE_GLOBAL shift and go to state 30
    VARIABLE_OBJETO shift and go to state 31
    VARIABLE_CLASE  shift and go to state 32
    CONSTANTE       shift and go to state 33

    codigo                         shift and go to state 85
    algoritmo                      shift and go to state 2
    asignacion                     shift and go to state 3
    sentenciaWHILE                 shift and go to state 4
    sentenciaFOR                   shift and go to state 5
    puts                           shift and go to state 6
    unless                         shift and go to state 7
    comentarios                    shift and go to state 8
    sentenciaIf                    shift and go to state 9
    sentenciaCASE                  shift and go to state 10
    slicing                        shift and go to state 11
    sentenciaBegin                 shift and go to state 12
    sentenciaFuncion               shift and go to state 13
    split                          shift and go to state 14
    push                           shift and go to state 15
    append                         shift and go to state 16
    pop                            shift and go to state 17
    variables                      shift and go to state 18

state 53

    (83) sentenciaIf -> IF comparaciones . codigo finalIf
    (1) codigo -> . algoritmo
    (2) codigo -> . algoritmo codigo
    (3) algoritmo -> . asignacion
    (4) algoritmo -> . sentenciaWHILE
    (5) algoritmo -> . sentenciaFOR
    (6) algoritmo -> . puts
    (7) algoritmo -> . unless
    (8) algoritmo -> . comentarios
    (9) algoritmo -> . sentenciaIf
    (10) algoritmo -> . sentenciaCASE
    (11) algoritmo -> . slicing
    (12) algoritmo -> . sentenciaBegin
    (13) algoritmo -> . sentenciaFuncion
    (14) algoritmo -> . split
    (15) algoritmo -> . push
    (16) algoritmo -> . append
    (17) algoritmo -> . pop
    (45) asignacion -> . variables IGUAL expresion
    (32) sentenciaWHILE -> . WHILE comparacion DO codigo END
    (19) sentenciaFOR -> . FOR variables IN range DO codigo END
    (21) puts -> . PUTS valor
    (18) unless -> . UNLESS comparacion codigo END
    (86) comentarios -> . COMENTARIO
    (83) sentenciaIf -> . IF comparaciones codigo finalIf
    (33) sentenciaCASE -> . CASE variables sentenciaWhens ELSE codigo END
    (47) slicing -> . variables CIZQ ENTERO CDER
    (48) slicing -> . variables CIZQ ENTERO COMA ENTERO CDER
    (49) slicing -> . variables CIZQ RANGO CDER
    (50) slicing -> . variables CIZQ CADENA CDER
    (44) sentenciaBegin -> . BEGIN codigo END
    (31) sentenciaFuncion -> . FUNCION variables codigo END
    (23) split -> . CADENA PUNTO SPLIT PIZQ valorsplit PDER
    (24) push -> . variables PUNTO PUSH PIZQ valor PDER
    (25) append -> . variables PUNTO APPEND PIZQ valor PDER
    (26) pop -> . variables PUNTO POP PIZQ valor PDER
    (27) pop -> . variables PUNTO POP PIZQ PDER
    (78) variables -> . VARIABLE_LOCAL
    (79) variables -> . VARIABLE_GLOBAL
    (80) variables -> . VARIABLE_OBJETO
    (81) variables -> . VARIABLE_CLASE
    (82) variables -> . CONSTANTE

    WHILE           shift and go to state 19
    FOR             shift and go to state 20
    PUTS            shift and go to state 21
    UNLESS          shift and go to state 22
    COMENTARIO      shift and go to state 23
    IF              shift and go to state 24
    CASE            shift and go to state 25
    BEGIN           shift and go to state 27
    FUNCION         shift and go to state 28
    CADENA          shift and go to state 26
    VARIABLE_LOCAL  shift and go to state 29
    VARIABLE_GLOBAL shift and go to state 30
    VARIABLE_OBJETO shift and go to state 31
    VARIABLE_CLASE  shift and go to state 32
    CONSTANTE       shift and go to state 33

    codigo                         shift and go to state 86
    algoritmo                      shift and go to state 2
    asignacion                     shift and go to state 3
    sentenciaWHILE                 shift and go to state 4
    sentenciaFOR                   shift and go to state 5
    puts                           shift and go to state 6
    unless                         shift and go to state 7
    comentarios                    shift and go to state 8
    sentenciaIf                    shift and go to state 9
    sentenciaCASE                  shift and go to state 10
    slicing                        shift and go to state 11
    sentenciaBegin                 shift and go to state 12
    sentenciaFuncion               shift and go to state 13
    split                          shift and go to state 14
    push                           shift and go to state 15
    append                         shift and go to state 16
    pop                            shift and go to state 17
    variables                      shift and go to state 18

state 54

    (56) comparaciones -> comparacion .
    (36) sentenciaAND -> comparacion . AND comparacion
    (37) sentenciaOR -> comparacion . OR comparacion

    WHILE           reduce using rule 56 (comparaciones -> comparacion .)
    FOR             reduce using rule 56 (comparaciones -> comparacion .)
    PUTS            reduce using rule 56 (comparaciones -> comparacion .)
    UNLESS          reduce using rule 56 (comparaciones -> comparacion .)
    COMENTARIO      reduce using rule 56 (comparaciones -> comparacion .)
    IF              reduce using rule 56 (comparaciones -> comparacion .)
    CASE            reduce using rule 56 (comparaciones -> comparacion .)
    BEGIN           reduce using rule 56 (comparaciones -> comparacion .)
    FUNCION         reduce using rule 56 (comparaciones -> comparacion .)
    CADENA          reduce using rule 56 (comparaciones -> comparacion .)
    VARIABLE_LOCAL  reduce using rule 56 (comparaciones -> comparacion .)
    VARIABLE_GLOBAL reduce using rule 56 (comparaciones -> comparacion .)
    VARIABLE_OBJETO reduce using rule 56 (comparaciones -> comparacion .)
    VARIABLE_CLASE  reduce using rule 56 (comparaciones -> comparacion .)
    CONSTANTE       reduce using rule 56 (comparaciones -> comparacion .)
    AND             shift and go to state 87
    OR              shift and go to state 88


state 55

    (57) comparaciones -> sentenciaAND .

    WHILE           reduce using rule 57 (comparaciones -> sentenciaAND .)
    FOR             reduce using rule 57 (comparaciones -> sentenciaAND .)
    PUTS            reduce using rule 57 (comparaciones -> sentenciaAND .)
    UNLESS          reduce using rule 57 (comparaciones -> sentenciaAND .)
    COMENTARIO      reduce using rule 57 (comparaciones -> sentenciaAND .)
    IF              reduce using rule 57 (comparaciones -> sentenciaAND .)
    CASE            reduce using rule 57 (comparaciones -> sentenciaAND .)
    BEGIN           reduce using rule 57 (comparaciones -> sentenciaAND .)
    FUNCION         reduce using rule 57 (comparaciones -> sentenciaAND .)
    CADENA          reduce using rule 57 (comparaciones -> sentenciaAND .)
    VARIABLE_LOCAL  reduce using rule 57 (comparaciones -> sentenciaAND .)
    VARIABLE_GLOBAL reduce using rule 57 (comparaciones -> sentenciaAND .)
    VARIABLE_OBJETO reduce using rule 57 (comparaciones -> sentenciaAND .)
    VARIABLE_CLASE  reduce using rule 57 (comparaciones -> sentenciaAND .)
    CONSTANTE       reduce using rule 57 (comparaciones -> sentenciaAND .)


state 56

    (58) comparaciones -> sentenciaOR .

    WHILE           reduce using rule 58 (comparaciones -> sentenciaOR .)
    FOR             reduce using rule 58 (comparaciones -> sentenciaOR .)
    PUTS            reduce using rule 58 (comparaciones -> sentenciaOR .)
    UNLESS          reduce using rule 58 (comparaciones -> sentenciaOR .)
    COMENTARIO      reduce using rule 58 (comparaciones -> sentenciaOR .)
    IF              reduce using rule 58 (comparaciones -> sentenciaOR .)
    CASE            reduce using rule 58 (comparaciones -> sentenciaOR .)
    BEGIN           reduce using rule 58 (comparaciones -> sentenciaOR .)
    FUNCION         reduce using rule 58 (comparaciones -> sentenciaOR .)
    CADENA          reduce using rule 58 (comparaciones -> sentenciaOR .)
    VARIABLE_LOCAL  reduce using rule 58 (comparaciones -> sentenciaOR .)
    VARIABLE_GLOBAL reduce using rule 58 (comparaciones -> sentenciaOR .)
    VARIABLE_OBJETO reduce using rule 58 (comparaciones -> sentenciaOR .)
    VARIABLE_CLASE  reduce using rule 58 (comparaciones -> sentenciaOR .)
    CONSTANTE       reduce using rule 58 (comparaciones -> sentenciaOR .)


state 57

    (33) sentenciaCASE -> CASE variables . sentenciaWhens ELSE codigo END
    (38) sentenciaWhens -> . sentenciaWHEN
    (39) sentenciaWhens -> . sentenciaWHEN sentenciaWhens
    (34) sentenciaWHEN -> . WHEN valorSencillo codigo
    (35) sentenciaWHEN -> . WHEN valorSencillo THEN codigo

    WHEN            shift and go to state 91

    sentenciaWhens                 shift and go to state 89
    sentenciaWHEN                  shift and go to state 90

state 58

    (23) split -> CADENA PUNTO . SPLIT PIZQ valorsplit PDER

    SPLIT           shift and go to state 92


state 59

    (44) sentenciaBegin -> BEGIN codigo . END

    END             shift and go to state 93


state 60

    (31) sentenciaFuncion -> FUNCION variables . codigo END
    (1) codigo -> . algoritmo
    (2) codigo -> . algoritmo codigo
    (3) algoritmo -> . asignacion
    (4) algoritmo -> . sentenciaWHILE
    (5) algoritmo -> . sentenciaFOR
    (6) algoritmo -> . puts
    (7) algoritmo -> . unless
    (8) algoritmo -> . comentarios
    (9) algoritmo -> . sentenciaIf
    (10) algoritmo -> . sentenciaCASE
    (11) algoritmo -> . slicing
    (12) algoritmo -> . sentenciaBegin
    (13) algoritmo -> . sentenciaFuncion
    (14) algoritmo -> . split
    (15) algoritmo -> . push
    (16) algoritmo -> . append
    (17) algoritmo -> . pop
    (45) asignacion -> . variables IGUAL expresion
    (32) sentenciaWHILE -> . WHILE comparacion DO codigo END
    (19) sentenciaFOR -> . FOR variables IN range DO codigo END
    (21) puts -> . PUTS valor
    (18) unless -> . UNLESS comparacion codigo END
    (86) comentarios -> . COMENTARIO
    (83) sentenciaIf -> . IF comparaciones codigo finalIf
    (33) sentenciaCASE -> . CASE variables sentenciaWhens ELSE codigo END
    (47) slicing -> . variables CIZQ ENTERO CDER
    (48) slicing -> . variables CIZQ ENTERO COMA ENTERO CDER
    (49) slicing -> . variables CIZQ RANGO CDER
    (50) slicing -> . variables CIZQ CADENA CDER
    (44) sentenciaBegin -> . BEGIN codigo END
    (31) sentenciaFuncion -> . FUNCION variables codigo END
    (23) split -> . CADENA PUNTO SPLIT PIZQ valorsplit PDER
    (24) push -> . variables PUNTO PUSH PIZQ valor PDER
    (25) append -> . variables PUNTO APPEND PIZQ valor PDER
    (26) pop -> . variables PUNTO POP PIZQ valor PDER
    (27) pop -> . variables PUNTO POP PIZQ PDER
    (78) variables -> . VARIABLE_LOCAL
    (79) variables -> . VARIABLE_GLOBAL
    (80) variables -> . VARIABLE_OBJETO
    (81) variables -> . VARIABLE_CLASE
    (82) variables -> . CONSTANTE

    WHILE           shift and go to state 19
    FOR             shift and go to state 20
    PUTS            shift and go to state 21
    UNLESS          shift and go to state 22
    COMENTARIO      shift and go to state 23
    IF              shift and go to state 24
    CASE            shift and go to state 25
    BEGIN           shift and go to state 27
    FUNCION         shift and go to state 28
    CADENA          shift and go to state 26
    VARIABLE_LOCAL  shift and go to state 29
    VARIABLE_GLOBAL shift and go to state 30
    VARIABLE_OBJETO shift and go to state 31
    VARIABLE_CLASE  shift and go to state 32
    CONSTANTE       shift and go to state 33

    variables                      shift and go to state 18
    codigo                         shift and go to state 94
    algoritmo                      shift and go to state 2
    asignacion                     shift and go to state 3
    sentenciaWHILE                 shift and go to state 4
    sentenciaFOR                   shift and go to state 5
    puts                           shift and go to state 6
    unless                         shift and go to state 7
    comentarios                    shift and go to state 8
    sentenciaIf                    shift and go to state 9
    sentenciaCASE                  shift and go to state 10
    slicing                        shift and go to state 11
    sentenciaBegin                 shift and go to state 12
    sentenciaFuncion               shift and go to state 13
    split                          shift and go to state 14
    push                           shift and go to state 15
    append                         shift and go to state 16
    pop                            shift and go to state 17

state 61

    (45) asignacion -> variables IGUAL expresion .

    WHILE           reduce using rule 45 (asignacion -> variables IGUAL expresion .)
    FOR             reduce using rule 45 (asignacion -> variables IGUAL expresion .)
    PUTS            reduce using rule 45 (asignacion -> variables IGUAL expresion .)
    UNLESS          reduce using rule 45 (asignacion -> variables IGUAL expresion .)
    COMENTARIO      reduce using rule 45 (asignacion -> variables IGUAL expresion .)
    IF              reduce using rule 45 (asignacion -> variables IGUAL expresion .)
    CASE            reduce using rule 45 (asignacion -> variables IGUAL expresion .)
    BEGIN           reduce using rule 45 (asignacion -> variables IGUAL expresion .)
    FUNCION         reduce using rule 45 (asignacion -> variables IGUAL expresion .)
    CADENA          reduce using rule 45 (asignacion -> variables IGUAL expresion .)
    VARIABLE_LOCAL  reduce using rule 45 (asignacion -> variables IGUAL expresion .)
    VARIABLE_GLOBAL reduce using rule 45 (asignacion -> variables IGUAL expresion .)
    VARIABLE_OBJETO reduce using rule 45 (asignacion -> variables IGUAL expresion .)
    VARIABLE_CLASE  reduce using rule 45 (asignacion -> variables IGUAL expresion .)
    CONSTANTE       reduce using rule 45 (asignacion -> variables IGUAL expresion .)
    $end            reduce using rule 45 (asignacion -> variables IGUAL expresion .)
    END             reduce using rule 45 (asignacion -> variables IGUAL expresion .)
    BREAK           reduce using rule 45 (asignacion -> variables IGUAL expresion .)
    WHEN            reduce using rule 45 (asignacion -> variables IGUAL expresion .)
    ELSE            reduce using rule 45 (asignacion -> variables IGUAL expresion .)


state 62

    (52) expresion -> PIZQ . valor operadorMat expresion PDER
    (70) valor -> . ENTERO
    (71) valor -> . variables
    (72) valor -> . CADENA
    (73) valor -> . HASH
    (74) valor -> . ARRAY
    (75) valor -> . split
    (76) valor -> . include
    (77) valor -> . reverse
    (78) variables -> . VARIABLE_LOCAL
    (79) variables -> . VARIABLE_GLOBAL
    (80) variables -> . VARIABLE_OBJETO
    (81) variables -> . VARIABLE_CLASE
    (82) variables -> . CONSTANTE
    (23) split -> . CADENA PUNTO SPLIT PIZQ valorsplit PDER
    (30) include -> . CADENA PUNTO INCLUDE INTERROGACION CADENA
    (22) reverse -> . CADENA PUNTO REVERSE

    ENTERO          shift and go to state 42
    CADENA          shift and go to state 44
    HASH            shift and go to state 45
    ARRAY           shift and go to state 46
    VARIABLE_LOCAL  shift and go to state 29
    VARIABLE_GLOBAL shift and go to state 30
    VARIABLE_OBJETO shift and go to state 31
    VARIABLE_CLASE  shift and go to state 32
    CONSTANTE       shift and go to state 33

    valor                          shift and go to state 95
    variables                      shift and go to state 43
    split                          shift and go to state 47
    include                        shift and go to state 48
    reverse                        shift and go to state 49

state 63

    (47) slicing -> variables CIZQ ENTERO . CDER
    (48) slicing -> variables CIZQ ENTERO . COMA ENTERO CDER

    CDER            shift and go to state 96
    COMA            shift and go to state 97


state 64

    (49) slicing -> variables CIZQ RANGO . CDER

    CDER            shift and go to state 98


state 65

    (50) slicing -> variables CIZQ CADENA . CDER

    CDER            shift and go to state 99


state 66

    (24) push -> variables PUNTO PUSH . PIZQ valor PDER

    PIZQ            shift and go to state 100


state 67

    (25) append -> variables PUNTO APPEND . PIZQ valor PDER

    PIZQ            shift and go to state 101


state 68

    (26) pop -> variables PUNTO POP . PIZQ valor PDER
    (27) pop -> variables PUNTO POP . PIZQ PDER

    PIZQ            shift and go to state 102


state 69

    (32) sentenciaWHILE -> WHILE comparacion DO . codigo END
    (1) codigo -> . algoritmo
    (2) codigo -> . algoritmo codigo
    (3) algoritmo -> . asignacion
    (4) algoritmo -> . sentenciaWHILE
    (5) algoritmo -> . sentenciaFOR
    (6) algoritmo -> . puts
    (7) algoritmo -> . unless
    (8) algoritmo -> . comentarios
    (9) algoritmo -> . sentenciaIf
    (10) algoritmo -> . sentenciaCASE
    (11) algoritmo -> . slicing
    (12) algoritmo -> . sentenciaBegin
    (13) algoritmo -> . sentenciaFuncion
    (14) algoritmo -> . split
    (15) algoritmo -> . push
    (16) algoritmo -> . append
    (17) algoritmo -> . pop
    (45) asignacion -> . variables IGUAL expresion
    (32) sentenciaWHILE -> . WHILE comparacion DO codigo END
    (19) sentenciaFOR -> . FOR variables IN range DO codigo END
    (21) puts -> . PUTS valor
    (18) unless -> . UNLESS comparacion codigo END
    (86) comentarios -> . COMENTARIO
    (83) sentenciaIf -> . IF comparaciones codigo finalIf
    (33) sentenciaCASE -> . CASE variables sentenciaWhens ELSE codigo END
    (47) slicing -> . variables CIZQ ENTERO CDER
    (48) slicing -> . variables CIZQ ENTERO COMA ENTERO CDER
    (49) slicing -> . variables CIZQ RANGO CDER
    (50) slicing -> . variables CIZQ CADENA CDER
    (44) sentenciaBegin -> . BEGIN codigo END
    (31) sentenciaFuncion -> . FUNCION variables codigo END
    (23) split -> . CADENA PUNTO SPLIT PIZQ valorsplit PDER
    (24) push -> . variables PUNTO PUSH PIZQ valor PDER
    (25) append -> . variables PUNTO APPEND PIZQ valor PDER
    (26) pop -> . variables PUNTO POP PIZQ valor PDER
    (27) pop -> . variables PUNTO POP PIZQ PDER
    (78) variables -> . VARIABLE_LOCAL
    (79) variables -> . VARIABLE_GLOBAL
    (80) variables -> . VARIABLE_OBJETO
    (81) variables -> . VARIABLE_CLASE
    (82) variables -> . CONSTANTE

    WHILE           shift and go to state 19
    FOR             shift and go to state 20
    PUTS            shift and go to state 21
    UNLESS          shift and go to state 22
    COMENTARIO      shift and go to state 23
    IF              shift and go to state 24
    CASE            shift and go to state 25
    BEGIN           shift and go to state 27
    FUNCION         shift and go to state 28
    CADENA          shift and go to state 26
    VARIABLE_LOCAL  shift and go to state 29
    VARIABLE_GLOBAL shift and go to state 30
    VARIABLE_OBJETO shift and go to state 31
    VARIABLE_CLASE  shift and go to state 32
    CONSTANTE       shift and go to state 33

    codigo                         shift and go to state 103
    algoritmo                      shift and go to state 2
    asignacion                     shift and go to state 3
    sentenciaWHILE                 shift and go to state 4
    sentenciaFOR                   shift and go to state 5
    puts                           shift and go to state 6
    unless                         shift and go to state 7
    comentarios                    shift and go to state 8
    sentenciaIf                    shift and go to state 9
    sentenciaCASE                  shift and go to state 10
    slicing                        shift and go to state 11
    sentenciaBegin                 shift and go to state 12
    sentenciaFuncion               shift and go to state 13
    split                          shift and go to state 14
    push                           shift and go to state 15
    append                         shift and go to state 16
    pop                            shift and go to state 17
    variables                      shift and go to state 18

state 70

    (53) comparacion -> expresion operadorComp . expresion
    (46) expresion -> . valor
    (51) expresion -> . valor operadorMat expresion
    (52) expresion -> . PIZQ valor operadorMat expresion PDER
    (70) valor -> . ENTERO
    (71) valor -> . variables
    (72) valor -> . CADENA
    (73) valor -> . HASH
    (74) valor -> . ARRAY
    (75) valor -> . split
    (76) valor -> . include
    (77) valor -> . reverse
    (78) variables -> . VARIABLE_LOCAL
    (79) variables -> . VARIABLE_GLOBAL
    (80) variables -> . VARIABLE_OBJETO
    (81) variables -> . VARIABLE_CLASE
    (82) variables -> . CONSTANTE
    (23) split -> . CADENA PUNTO SPLIT PIZQ valorsplit PDER
    (30) include -> . CADENA PUNTO INCLUDE INTERROGACION CADENA
    (22) reverse -> . CADENA PUNTO REVERSE

    PIZQ            shift and go to state 62
    ENTERO          shift and go to state 42
    CADENA          shift and go to state 44
    HASH            shift and go to state 45
    ARRAY           shift and go to state 46
    VARIABLE_LOCAL  shift and go to state 29
    VARIABLE_GLOBAL shift and go to state 30
    VARIABLE_OBJETO shift and go to state 31
    VARIABLE_CLASE  shift and go to state 32
    CONSTANTE       shift and go to state 33

    expresion                      shift and go to state 104
    valor                          shift and go to state 41
    variables                      shift and go to state 43
    split                          shift and go to state 47
    include                        shift and go to state 48
    reverse                        shift and go to state 49

state 71

    (66) operadorComp -> MAYOR .

    PIZQ            reduce using rule 66 (operadorComp -> MAYOR .)
    ENTERO          reduce using rule 66 (operadorComp -> MAYOR .)
    CADENA          reduce using rule 66 (operadorComp -> MAYOR .)
    HASH            reduce using rule 66 (operadorComp -> MAYOR .)
    ARRAY           reduce using rule 66 (operadorComp -> MAYOR .)
    VARIABLE_LOCAL  reduce using rule 66 (operadorComp -> MAYOR .)
    VARIABLE_GLOBAL reduce using rule 66 (operadorComp -> MAYOR .)
    VARIABLE_OBJETO reduce using rule 66 (operadorComp -> MAYOR .)
    VARIABLE_CLASE  reduce using rule 66 (operadorComp -> MAYOR .)
    CONSTANTE       reduce using rule 66 (operadorComp -> MAYOR .)


state 72

    (67) operadorComp -> MENOR .

    PIZQ            reduce using rule 67 (operadorComp -> MENOR .)
    ENTERO          reduce using rule 67 (operadorComp -> MENOR .)
    CADENA          reduce using rule 67 (operadorComp -> MENOR .)
    HASH            reduce using rule 67 (operadorComp -> MENOR .)
    ARRAY           reduce using rule 67 (operadorComp -> MENOR .)
    VARIABLE_LOCAL  reduce using rule 67 (operadorComp -> MENOR .)
    VARIABLE_GLOBAL reduce using rule 67 (operadorComp -> MENOR .)
    VARIABLE_OBJETO reduce using rule 67 (operadorComp -> MENOR .)
    VARIABLE_CLASE  reduce using rule 67 (operadorComp -> MENOR .)
    CONSTANTE       reduce using rule 67 (operadorComp -> MENOR .)


state 73

    (68) operadorComp -> COMP_IGUAL .

    PIZQ            reduce using rule 68 (operadorComp -> COMP_IGUAL .)
    ENTERO          reduce using rule 68 (operadorComp -> COMP_IGUAL .)
    CADENA          reduce using rule 68 (operadorComp -> COMP_IGUAL .)
    HASH            reduce using rule 68 (operadorComp -> COMP_IGUAL .)
    ARRAY           reduce using rule 68 (operadorComp -> COMP_IGUAL .)
    VARIABLE_LOCAL  reduce using rule 68 (operadorComp -> COMP_IGUAL .)
    VARIABLE_GLOBAL reduce using rule 68 (operadorComp -> COMP_IGUAL .)
    VARIABLE_OBJETO reduce using rule 68 (operadorComp -> COMP_IGUAL .)
    VARIABLE_CLASE  reduce using rule 68 (operadorComp -> COMP_IGUAL .)
    CONSTANTE       reduce using rule 68 (operadorComp -> COMP_IGUAL .)


state 74

    (69) operadorComp -> DIFERENTE .

    PIZQ            reduce using rule 69 (operadorComp -> DIFERENTE .)
    ENTERO          reduce using rule 69 (operadorComp -> DIFERENTE .)
    CADENA          reduce using rule 69 (operadorComp -> DIFERENTE .)
    HASH            reduce using rule 69 (operadorComp -> DIFERENTE .)
    ARRAY           reduce using rule 69 (operadorComp -> DIFERENTE .)
    VARIABLE_LOCAL  reduce using rule 69 (operadorComp -> DIFERENTE .)
    VARIABLE_GLOBAL reduce using rule 69 (operadorComp -> DIFERENTE .)
    VARIABLE_OBJETO reduce using rule 69 (operadorComp -> DIFERENTE .)
    VARIABLE_CLASE  reduce using rule 69 (operadorComp -> DIFERENTE .)
    CONSTANTE       reduce using rule 69 (operadorComp -> DIFERENTE .)


state 75

    (54) comparacion -> PIZQ expresion . PDER operadorComp expresion
    (55) comparacion -> PIZQ expresion . operadorComp expresion PDER
    (66) operadorComp -> . MAYOR
    (67) operadorComp -> . MENOR
    (68) operadorComp -> . COMP_IGUAL
    (69) operadorComp -> . DIFERENTE

    PDER            shift and go to state 105
    MAYOR           shift and go to state 71
    MENOR           shift and go to state 72
    COMP_IGUAL      shift and go to state 73
    DIFERENTE       shift and go to state 74

    operadorComp                   shift and go to state 106

state 76

    (52) expresion -> PIZQ valor . operadorMat expresion PDER
    (46) expresion -> valor .
    (51) expresion -> valor . operadorMat expresion
    (61) operadorMat -> . MAS
    (62) operadorMat -> . RESTA
    (63) operadorMat -> . PROD
    (64) operadorMat -> . DIVISION
    (65) operadorMat -> . POTENCIA

    PDER            reduce using rule 46 (expresion -> valor .)
    MAYOR           reduce using rule 46 (expresion -> valor .)
    MENOR           reduce using rule 46 (expresion -> valor .)
    COMP_IGUAL      reduce using rule 46 (expresion -> valor .)
    DIFERENTE       reduce using rule 46 (expresion -> valor .)
    MAS             shift and go to state 78
    RESTA           shift and go to state 79
    PROD            shift and go to state 80
    DIVISION        shift and go to state 81
    POTENCIA        shift and go to state 82

    operadorMat                    shift and go to state 107

state 77

    (51) expresion -> valor operadorMat . expresion
    (46) expresion -> . valor
    (51) expresion -> . valor operadorMat expresion
    (52) expresion -> . PIZQ valor operadorMat expresion PDER
    (70) valor -> . ENTERO
    (71) valor -> . variables
    (72) valor -> . CADENA
    (73) valor -> . HASH
    (74) valor -> . ARRAY
    (75) valor -> . split
    (76) valor -> . include
    (77) valor -> . reverse
    (78) variables -> . VARIABLE_LOCAL
    (79) variables -> . VARIABLE_GLOBAL
    (80) variables -> . VARIABLE_OBJETO
    (81) variables -> . VARIABLE_CLASE
    (82) variables -> . CONSTANTE
    (23) split -> . CADENA PUNTO SPLIT PIZQ valorsplit PDER
    (30) include -> . CADENA PUNTO INCLUDE INTERROGACION CADENA
    (22) reverse -> . CADENA PUNTO REVERSE

    PIZQ            shift and go to state 62
    ENTERO          shift and go to state 42
    CADENA          shift and go to state 44
    HASH            shift and go to state 45
    ARRAY           shift and go to state 46
    VARIABLE_LOCAL  shift and go to state 29
    VARIABLE_GLOBAL shift and go to state 30
    VARIABLE_OBJETO shift and go to state 31
    VARIABLE_CLASE  shift and go to state 32
    CONSTANTE       shift and go to state 33

    valor                          shift and go to state 41
    expresion                      shift and go to state 108
    variables                      shift and go to state 43
    split                          shift and go to state 47
    include                        shift and go to state 48
    reverse                        shift and go to state 49

state 78

    (61) operadorMat -> MAS .

    PIZQ            reduce using rule 61 (operadorMat -> MAS .)
    ENTERO          reduce using rule 61 (operadorMat -> MAS .)
    CADENA          reduce using rule 61 (operadorMat -> MAS .)
    HASH            reduce using rule 61 (operadorMat -> MAS .)
    ARRAY           reduce using rule 61 (operadorMat -> MAS .)
    VARIABLE_LOCAL  reduce using rule 61 (operadorMat -> MAS .)
    VARIABLE_GLOBAL reduce using rule 61 (operadorMat -> MAS .)
    VARIABLE_OBJETO reduce using rule 61 (operadorMat -> MAS .)
    VARIABLE_CLASE  reduce using rule 61 (operadorMat -> MAS .)
    CONSTANTE       reduce using rule 61 (operadorMat -> MAS .)


state 79

    (62) operadorMat -> RESTA .

    PIZQ            reduce using rule 62 (operadorMat -> RESTA .)
    ENTERO          reduce using rule 62 (operadorMat -> RESTA .)
    CADENA          reduce using rule 62 (operadorMat -> RESTA .)
    HASH            reduce using rule 62 (operadorMat -> RESTA .)
    ARRAY           reduce using rule 62 (operadorMat -> RESTA .)
    VARIABLE_LOCAL  reduce using rule 62 (operadorMat -> RESTA .)
    VARIABLE_GLOBAL reduce using rule 62 (operadorMat -> RESTA .)
    VARIABLE_OBJETO reduce using rule 62 (operadorMat -> RESTA .)
    VARIABLE_CLASE  reduce using rule 62 (operadorMat -> RESTA .)
    CONSTANTE       reduce using rule 62 (operadorMat -> RESTA .)


state 80

    (63) operadorMat -> PROD .

    PIZQ            reduce using rule 63 (operadorMat -> PROD .)
    ENTERO          reduce using rule 63 (operadorMat -> PROD .)
    CADENA          reduce using rule 63 (operadorMat -> PROD .)
    HASH            reduce using rule 63 (operadorMat -> PROD .)
    ARRAY           reduce using rule 63 (operadorMat -> PROD .)
    VARIABLE_LOCAL  reduce using rule 63 (operadorMat -> PROD .)
    VARIABLE_GLOBAL reduce using rule 63 (operadorMat -> PROD .)
    VARIABLE_OBJETO reduce using rule 63 (operadorMat -> PROD .)
    VARIABLE_CLASE  reduce using rule 63 (operadorMat -> PROD .)
    CONSTANTE       reduce using rule 63 (operadorMat -> PROD .)


state 81

    (64) operadorMat -> DIVISION .

    PIZQ            reduce using rule 64 (operadorMat -> DIVISION .)
    ENTERO          reduce using rule 64 (operadorMat -> DIVISION .)
    CADENA          reduce using rule 64 (operadorMat -> DIVISION .)
    HASH            reduce using rule 64 (operadorMat -> DIVISION .)
    ARRAY           reduce using rule 64 (operadorMat -> DIVISION .)
    VARIABLE_LOCAL  reduce using rule 64 (operadorMat -> DIVISION .)
    VARIABLE_GLOBAL reduce using rule 64 (operadorMat -> DIVISION .)
    VARIABLE_OBJETO reduce using rule 64 (operadorMat -> DIVISION .)
    VARIABLE_CLASE  reduce using rule 64 (operadorMat -> DIVISION .)
    CONSTANTE       reduce using rule 64 (operadorMat -> DIVISION .)


state 82

    (65) operadorMat -> POTENCIA .

    PIZQ            reduce using rule 65 (operadorMat -> POTENCIA .)
    ENTERO          reduce using rule 65 (operadorMat -> POTENCIA .)
    CADENA          reduce using rule 65 (operadorMat -> POTENCIA .)
    HASH            reduce using rule 65 (operadorMat -> POTENCIA .)
    ARRAY           reduce using rule 65 (operadorMat -> POTENCIA .)
    VARIABLE_LOCAL  reduce using rule 65 (operadorMat -> POTENCIA .)
    VARIABLE_GLOBAL reduce using rule 65 (operadorMat -> POTENCIA .)
    VARIABLE_OBJETO reduce using rule 65 (operadorMat -> POTENCIA .)
    VARIABLE_CLASE  reduce using rule 65 (operadorMat -> POTENCIA .)
    CONSTANTE       reduce using rule 65 (operadorMat -> POTENCIA .)


state 83

    (23) split -> CADENA PUNTO . SPLIT PIZQ valorsplit PDER
    (30) include -> CADENA PUNTO . INCLUDE INTERROGACION CADENA
    (22) reverse -> CADENA PUNTO . REVERSE

    SPLIT           shift and go to state 92
    INCLUDE         shift and go to state 109
    REVERSE         shift and go to state 110


state 84

    (19) sentenciaFOR -> FOR variables IN . range DO codigo END
    (20) range -> . ENTERO RANGO ENTERO

    ENTERO          shift and go to state 112

    range                          shift and go to state 111

state 85

    (18) unless -> UNLESS comparacion codigo . END

    END             shift and go to state 113


state 86

    (83) sentenciaIf -> IF comparaciones codigo . finalIf
    (84) finalIf -> . END
    (85) finalIf -> . sentenciaBREAK END
    (59) sentenciaBREAK -> . BREAK
    (60) sentenciaBREAK -> . BREAK variables

    END             shift and go to state 115
    BREAK           shift and go to state 117

    finalIf                        shift and go to state 114
    sentenciaBREAK                 shift and go to state 116

state 87

    (36) sentenciaAND -> comparacion AND . comparacion
    (53) comparacion -> . expresion operadorComp expresion
    (54) comparacion -> . PIZQ expresion PDER operadorComp expresion
    (55) comparacion -> . PIZQ expresion operadorComp expresion PDER
    (46) expresion -> . valor
    (51) expresion -> . valor operadorMat expresion
    (52) expresion -> . PIZQ valor operadorMat expresion PDER
    (70) valor -> . ENTERO
    (71) valor -> . variables
    (72) valor -> . CADENA
    (73) valor -> . HASH
    (74) valor -> . ARRAY
    (75) valor -> . split
    (76) valor -> . include
    (77) valor -> . reverse
    (78) variables -> . VARIABLE_LOCAL
    (79) variables -> . VARIABLE_GLOBAL
    (80) variables -> . VARIABLE_OBJETO
    (81) variables -> . VARIABLE_CLASE
    (82) variables -> . CONSTANTE
    (23) split -> . CADENA PUNTO SPLIT PIZQ valorsplit PDER
    (30) include -> . CADENA PUNTO INCLUDE INTERROGACION CADENA
    (22) reverse -> . CADENA PUNTO REVERSE

    PIZQ            shift and go to state 40
    ENTERO          shift and go to state 42
    CADENA          shift and go to state 44
    HASH            shift and go to state 45
    ARRAY           shift and go to state 46
    VARIABLE_LOCAL  shift and go to state 29
    VARIABLE_GLOBAL shift and go to state 30
    VARIABLE_OBJETO shift and go to state 31
    VARIABLE_CLASE  shift and go to state 32
    CONSTANTE       shift and go to state 33

    comparacion                    shift and go to state 118
    expresion                      shift and go to state 39
    valor                          shift and go to state 41
    variables                      shift and go to state 43
    split                          shift and go to state 47
    include                        shift and go to state 48
    reverse                        shift and go to state 49

state 88

    (37) sentenciaOR -> comparacion OR . comparacion
    (53) comparacion -> . expresion operadorComp expresion
    (54) comparacion -> . PIZQ expresion PDER operadorComp expresion
    (55) comparacion -> . PIZQ expresion operadorComp expresion PDER
    (46) expresion -> . valor
    (51) expresion -> . valor operadorMat expresion
    (52) expresion -> . PIZQ valor operadorMat expresion PDER
    (70) valor -> . ENTERO
    (71) valor -> . variables
    (72) valor -> . CADENA
    (73) valor -> . HASH
    (74) valor -> . ARRAY
    (75) valor -> . split
    (76) valor -> . include
    (77) valor -> . reverse
    (78) variables -> . VARIABLE_LOCAL
    (79) variables -> . VARIABLE_GLOBAL
    (80) variables -> . VARIABLE_OBJETO
    (81) variables -> . VARIABLE_CLASE
    (82) variables -> . CONSTANTE
    (23) split -> . CADENA PUNTO SPLIT PIZQ valorsplit PDER
    (30) include -> . CADENA PUNTO INCLUDE INTERROGACION CADENA
    (22) reverse -> . CADENA PUNTO REVERSE

    PIZQ            shift and go to state 40
    ENTERO          shift and go to state 42
    CADENA          shift and go to state 44
    HASH            shift and go to state 45
    ARRAY           shift and go to state 46
    VARIABLE_LOCAL  shift and go to state 29
    VARIABLE_GLOBAL shift and go to state 30
    VARIABLE_OBJETO shift and go to state 31
    VARIABLE_CLASE  shift and go to state 32
    CONSTANTE       shift and go to state 33

    comparacion                    shift and go to state 119
    expresion                      shift and go to state 39
    valor                          shift and go to state 41
    variables                      shift and go to state 43
    split                          shift and go to state 47
    include                        shift and go to state 48
    reverse                        shift and go to state 49

state 89

    (33) sentenciaCASE -> CASE variables sentenciaWhens . ELSE codigo END

    ELSE            shift and go to state 120


state 90

    (38) sentenciaWhens -> sentenciaWHEN .
    (39) sentenciaWhens -> sentenciaWHEN . sentenciaWhens
    (38) sentenciaWhens -> . sentenciaWHEN
    (39) sentenciaWhens -> . sentenciaWHEN sentenciaWhens
    (34) sentenciaWHEN -> . WHEN valorSencillo codigo
    (35) sentenciaWHEN -> . WHEN valorSencillo THEN codigo

    ELSE            reduce using rule 38 (sentenciaWhens -> sentenciaWHEN .)
    WHEN            shift and go to state 91

    sentenciaWHEN                  shift and go to state 90
    sentenciaWhens                 shift and go to state 121

state 91

    (34) sentenciaWHEN -> WHEN . valorSencillo codigo
    (35) sentenciaWHEN -> WHEN . valorSencillo THEN codigo
    (40) valorSencillo -> . ENTERO
    (41) valorSencillo -> . variables
    (42) valorSencillo -> . CADENA
    (43) valorSencillo -> . RANGO
    (78) variables -> . VARIABLE_LOCAL
    (79) variables -> . VARIABLE_GLOBAL
    (80) variables -> . VARIABLE_OBJETO
    (81) variables -> . VARIABLE_CLASE
    (82) variables -> . CONSTANTE

    ENTERO          shift and go to state 123
    CADENA          shift and go to state 125
    RANGO           shift and go to state 126
    VARIABLE_LOCAL  shift and go to state 29
    VARIABLE_GLOBAL shift and go to state 30
    VARIABLE_OBJETO shift and go to state 31
    VARIABLE_CLASE  shift and go to state 32
    CONSTANTE       shift and go to state 33

    valorSencillo                  shift and go to state 122
    variables                      shift and go to state 124

state 92

    (23) split -> CADENA PUNTO SPLIT . PIZQ valorsplit PDER

    PIZQ            shift and go to state 127


state 93

    (44) sentenciaBegin -> BEGIN codigo END .

    WHILE           reduce using rule 44 (sentenciaBegin -> BEGIN codigo END .)
    FOR             reduce using rule 44 (sentenciaBegin -> BEGIN codigo END .)
    PUTS            reduce using rule 44 (sentenciaBegin -> BEGIN codigo END .)
    UNLESS          reduce using rule 44 (sentenciaBegin -> BEGIN codigo END .)
    COMENTARIO      reduce using rule 44 (sentenciaBegin -> BEGIN codigo END .)
    IF              reduce using rule 44 (sentenciaBegin -> BEGIN codigo END .)
    CASE            reduce using rule 44 (sentenciaBegin -> BEGIN codigo END .)
    BEGIN           reduce using rule 44 (sentenciaBegin -> BEGIN codigo END .)
    FUNCION         reduce using rule 44 (sentenciaBegin -> BEGIN codigo END .)
    CADENA          reduce using rule 44 (sentenciaBegin -> BEGIN codigo END .)
    VARIABLE_LOCAL  reduce using rule 44 (sentenciaBegin -> BEGIN codigo END .)
    VARIABLE_GLOBAL reduce using rule 44 (sentenciaBegin -> BEGIN codigo END .)
    VARIABLE_OBJETO reduce using rule 44 (sentenciaBegin -> BEGIN codigo END .)
    VARIABLE_CLASE  reduce using rule 44 (sentenciaBegin -> BEGIN codigo END .)
    CONSTANTE       reduce using rule 44 (sentenciaBegin -> BEGIN codigo END .)
    $end            reduce using rule 44 (sentenciaBegin -> BEGIN codigo END .)
    END             reduce using rule 44 (sentenciaBegin -> BEGIN codigo END .)
    BREAK           reduce using rule 44 (sentenciaBegin -> BEGIN codigo END .)
    WHEN            reduce using rule 44 (sentenciaBegin -> BEGIN codigo END .)
    ELSE            reduce using rule 44 (sentenciaBegin -> BEGIN codigo END .)


state 94

    (31) sentenciaFuncion -> FUNCION variables codigo . END

    END             shift and go to state 128


state 95

    (52) expresion -> PIZQ valor . operadorMat expresion PDER
    (61) operadorMat -> . MAS
    (62) operadorMat -> . RESTA
    (63) operadorMat -> . PROD
    (64) operadorMat -> . DIVISION
    (65) operadorMat -> . POTENCIA

    MAS             shift and go to state 78
    RESTA           shift and go to state 79
    PROD            shift and go to state 80
    DIVISION        shift and go to state 81
    POTENCIA        shift and go to state 82

    operadorMat                    shift and go to state 129

state 96

    (47) slicing -> variables CIZQ ENTERO CDER .

    WHILE           reduce using rule 47 (slicing -> variables CIZQ ENTERO CDER .)
    FOR             reduce using rule 47 (slicing -> variables CIZQ ENTERO CDER .)
    PUTS            reduce using rule 47 (slicing -> variables CIZQ ENTERO CDER .)
    UNLESS          reduce using rule 47 (slicing -> variables CIZQ ENTERO CDER .)
    COMENTARIO      reduce using rule 47 (slicing -> variables CIZQ ENTERO CDER .)
    IF              reduce using rule 47 (slicing -> variables CIZQ ENTERO CDER .)
    CASE            reduce using rule 47 (slicing -> variables CIZQ ENTERO CDER .)
    BEGIN           reduce using rule 47 (slicing -> variables CIZQ ENTERO CDER .)
    FUNCION         reduce using rule 47 (slicing -> variables CIZQ ENTERO CDER .)
    CADENA          reduce using rule 47 (slicing -> variables CIZQ ENTERO CDER .)
    VARIABLE_LOCAL  reduce using rule 47 (slicing -> variables CIZQ ENTERO CDER .)
    VARIABLE_GLOBAL reduce using rule 47 (slicing -> variables CIZQ ENTERO CDER .)
    VARIABLE_OBJETO reduce using rule 47 (slicing -> variables CIZQ ENTERO CDER .)
    VARIABLE_CLASE  reduce using rule 47 (slicing -> variables CIZQ ENTERO CDER .)
    CONSTANTE       reduce using rule 47 (slicing -> variables CIZQ ENTERO CDER .)
    $end            reduce using rule 47 (slicing -> variables CIZQ ENTERO CDER .)
    END             reduce using rule 47 (slicing -> variables CIZQ ENTERO CDER .)
    BREAK           reduce using rule 47 (slicing -> variables CIZQ ENTERO CDER .)
    WHEN            reduce using rule 47 (slicing -> variables CIZQ ENTERO CDER .)
    ELSE            reduce using rule 47 (slicing -> variables CIZQ ENTERO CDER .)


state 97

    (48) slicing -> variables CIZQ ENTERO COMA . ENTERO CDER

    ENTERO          shift and go to state 130


state 98

    (49) slicing -> variables CIZQ RANGO CDER .

    WHILE           reduce using rule 49 (slicing -> variables CIZQ RANGO CDER .)
    FOR             reduce using rule 49 (slicing -> variables CIZQ RANGO CDER .)
    PUTS            reduce using rule 49 (slicing -> variables CIZQ RANGO CDER .)
    UNLESS          reduce using rule 49 (slicing -> variables CIZQ RANGO CDER .)
    COMENTARIO      reduce using rule 49 (slicing -> variables CIZQ RANGO CDER .)
    IF              reduce using rule 49 (slicing -> variables CIZQ RANGO CDER .)
    CASE            reduce using rule 49 (slicing -> variables CIZQ RANGO CDER .)
    BEGIN           reduce using rule 49 (slicing -> variables CIZQ RANGO CDER .)
    FUNCION         reduce using rule 49 (slicing -> variables CIZQ RANGO CDER .)
    CADENA          reduce using rule 49 (slicing -> variables CIZQ RANGO CDER .)
    VARIABLE_LOCAL  reduce using rule 49 (slicing -> variables CIZQ RANGO CDER .)
    VARIABLE_GLOBAL reduce using rule 49 (slicing -> variables CIZQ RANGO CDER .)
    VARIABLE_OBJETO reduce using rule 49 (slicing -> variables CIZQ RANGO CDER .)
    VARIABLE_CLASE  reduce using rule 49 (slicing -> variables CIZQ RANGO CDER .)
    CONSTANTE       reduce using rule 49 (slicing -> variables CIZQ RANGO CDER .)
    $end            reduce using rule 49 (slicing -> variables CIZQ RANGO CDER .)
    END             reduce using rule 49 (slicing -> variables CIZQ RANGO CDER .)
    BREAK           reduce using rule 49 (slicing -> variables CIZQ RANGO CDER .)
    WHEN            reduce using rule 49 (slicing -> variables CIZQ RANGO CDER .)
    ELSE            reduce using rule 49 (slicing -> variables CIZQ RANGO CDER .)


state 99

    (50) slicing -> variables CIZQ CADENA CDER .

    WHILE           reduce using rule 50 (slicing -> variables CIZQ CADENA CDER .)
    FOR             reduce using rule 50 (slicing -> variables CIZQ CADENA CDER .)
    PUTS            reduce using rule 50 (slicing -> variables CIZQ CADENA CDER .)
    UNLESS          reduce using rule 50 (slicing -> variables CIZQ CADENA CDER .)
    COMENTARIO      reduce using rule 50 (slicing -> variables CIZQ CADENA CDER .)
    IF              reduce using rule 50 (slicing -> variables CIZQ CADENA CDER .)
    CASE            reduce using rule 50 (slicing -> variables CIZQ CADENA CDER .)
    BEGIN           reduce using rule 50 (slicing -> variables CIZQ CADENA CDER .)
    FUNCION         reduce using rule 50 (slicing -> variables CIZQ CADENA CDER .)
    CADENA          reduce using rule 50 (slicing -> variables CIZQ CADENA CDER .)
    VARIABLE_LOCAL  reduce using rule 50 (slicing -> variables CIZQ CADENA CDER .)
    VARIABLE_GLOBAL reduce using rule 50 (slicing -> variables CIZQ CADENA CDER .)
    VARIABLE_OBJETO reduce using rule 50 (slicing -> variables CIZQ CADENA CDER .)
    VARIABLE_CLASE  reduce using rule 50 (slicing -> variables CIZQ CADENA CDER .)
    CONSTANTE       reduce using rule 50 (slicing -> variables CIZQ CADENA CDER .)
    $end            reduce using rule 50 (slicing -> variables CIZQ CADENA CDER .)
    END             reduce using rule 50 (slicing -> variables CIZQ CADENA CDER .)
    BREAK           reduce using rule 50 (slicing -> variables CIZQ CADENA CDER .)
    WHEN            reduce using rule 50 (slicing -> variables CIZQ CADENA CDER .)
    ELSE            reduce using rule 50 (slicing -> variables CIZQ CADENA CDER .)


state 100

    (24) push -> variables PUNTO PUSH PIZQ . valor PDER
    (70) valor -> . ENTERO
    (71) valor -> . variables
    (72) valor -> . CADENA
    (73) valor -> . HASH
    (74) valor -> . ARRAY
    (75) valor -> . split
    (76) valor -> . include
    (77) valor -> . reverse
    (78) variables -> . VARIABLE_LOCAL
    (79) variables -> . VARIABLE_GLOBAL
    (80) variables -> . VARIABLE_OBJETO
    (81) variables -> . VARIABLE_CLASE
    (82) variables -> . CONSTANTE
    (23) split -> . CADENA PUNTO SPLIT PIZQ valorsplit PDER
    (30) include -> . CADENA PUNTO INCLUDE INTERROGACION CADENA
    (22) reverse -> . CADENA PUNTO REVERSE

    ENTERO          shift and go to state 42
    CADENA          shift and go to state 44
    HASH            shift and go to state 45
    ARRAY           shift and go to state 46
    VARIABLE_LOCAL  shift and go to state 29
    VARIABLE_GLOBAL shift and go to state 30
    VARIABLE_OBJETO shift and go to state 31
    VARIABLE_CLASE  shift and go to state 32
    CONSTANTE       shift and go to state 33

    variables                      shift and go to state 43
    valor                          shift and go to state 131
    split                          shift and go to state 47
    include                        shift and go to state 48
    reverse                        shift and go to state 49

state 101

    (25) append -> variables PUNTO APPEND PIZQ . valor PDER
    (70) valor -> . ENTERO
    (71) valor -> . variables
    (72) valor -> . CADENA
    (73) valor -> . HASH
    (74) valor -> . ARRAY
    (75) valor -> . split
    (76) valor -> . include
    (77) valor -> . reverse
    (78) variables -> . VARIABLE_LOCAL
    (79) variables -> . VARIABLE_GLOBAL
    (80) variables -> . VARIABLE_OBJETO
    (81) variables -> . VARIABLE_CLASE
    (82) variables -> . CONSTANTE
    (23) split -> . CADENA PUNTO SPLIT PIZQ valorsplit PDER
    (30) include -> . CADENA PUNTO INCLUDE INTERROGACION CADENA
    (22) reverse -> . CADENA PUNTO REVERSE

    ENTERO          shift and go to state 42
    CADENA          shift and go to state 44
    HASH            shift and go to state 45
    ARRAY           shift and go to state 46
    VARIABLE_LOCAL  shift and go to state 29
    VARIABLE_GLOBAL shift and go to state 30
    VARIABLE_OBJETO shift and go to state 31
    VARIABLE_CLASE  shift and go to state 32
    CONSTANTE       shift and go to state 33

    variables                      shift and go to state 43
    valor                          shift and go to state 132
    split                          shift and go to state 47
    include                        shift and go to state 48
    reverse                        shift and go to state 49

state 102

    (26) pop -> variables PUNTO POP PIZQ . valor PDER
    (27) pop -> variables PUNTO POP PIZQ . PDER
    (70) valor -> . ENTERO
    (71) valor -> . variables
    (72) valor -> . CADENA
    (73) valor -> . HASH
    (74) valor -> . ARRAY
    (75) valor -> . split
    (76) valor -> . include
    (77) valor -> . reverse
    (78) variables -> . VARIABLE_LOCAL
    (79) variables -> . VARIABLE_GLOBAL
    (80) variables -> . VARIABLE_OBJETO
    (81) variables -> . VARIABLE_CLASE
    (82) variables -> . CONSTANTE
    (23) split -> . CADENA PUNTO SPLIT PIZQ valorsplit PDER
    (30) include -> . CADENA PUNTO INCLUDE INTERROGACION CADENA
    (22) reverse -> . CADENA PUNTO REVERSE

    PDER            shift and go to state 134
    ENTERO          shift and go to state 42
    CADENA          shift and go to state 44
    HASH            shift and go to state 45
    ARRAY           shift and go to state 46
    VARIABLE_LOCAL  shift and go to state 29
    VARIABLE_GLOBAL shift and go to state 30
    VARIABLE_OBJETO shift and go to state 31
    VARIABLE_CLASE  shift and go to state 32
    CONSTANTE       shift and go to state 33

    variables                      shift and go to state 43
    valor                          shift and go to state 133
    split                          shift and go to state 47
    include                        shift and go to state 48
    reverse                        shift and go to state 49

state 103

    (32) sentenciaWHILE -> WHILE comparacion DO codigo . END

    END             shift and go to state 135


state 104

    (53) comparacion -> expresion operadorComp expresion .

    DO              reduce using rule 53 (comparacion -> expresion operadorComp expresion .)
    WHILE           reduce using rule 53 (comparacion -> expresion operadorComp expresion .)
    FOR             reduce using rule 53 (comparacion -> expresion operadorComp expresion .)
    PUTS            reduce using rule 53 (comparacion -> expresion operadorComp expresion .)
    UNLESS          reduce using rule 53 (comparacion -> expresion operadorComp expresion .)
    COMENTARIO      reduce using rule 53 (comparacion -> expresion operadorComp expresion .)
    IF              reduce using rule 53 (comparacion -> expresion operadorComp expresion .)
    CASE            reduce using rule 53 (comparacion -> expresion operadorComp expresion .)
    BEGIN           reduce using rule 53 (comparacion -> expresion operadorComp expresion .)
    FUNCION         reduce using rule 53 (comparacion -> expresion operadorComp expresion .)
    CADENA          reduce using rule 53 (comparacion -> expresion operadorComp expresion .)
    VARIABLE_LOCAL  reduce using rule 53 (comparacion -> expresion operadorComp expresion .)
    VARIABLE_GLOBAL reduce using rule 53 (comparacion -> expresion operadorComp expresion .)
    VARIABLE_OBJETO reduce using rule 53 (comparacion -> expresion operadorComp expresion .)
    VARIABLE_CLASE  reduce using rule 53 (comparacion -> expresion operadorComp expresion .)
    CONSTANTE       reduce using rule 53 (comparacion -> expresion operadorComp expresion .)
    AND             reduce using rule 53 (comparacion -> expresion operadorComp expresion .)
    OR              reduce using rule 53 (comparacion -> expresion operadorComp expresion .)


state 105

    (54) comparacion -> PIZQ expresion PDER . operadorComp expresion
    (66) operadorComp -> . MAYOR
    (67) operadorComp -> . MENOR
    (68) operadorComp -> . COMP_IGUAL
    (69) operadorComp -> . DIFERENTE

    MAYOR           shift and go to state 71
    MENOR           shift and go to state 72
    COMP_IGUAL      shift and go to state 73
    DIFERENTE       shift and go to state 74

    operadorComp                   shift and go to state 136

state 106

    (55) comparacion -> PIZQ expresion operadorComp . expresion PDER
    (46) expresion -> . valor
    (51) expresion -> . valor operadorMat expresion
    (52) expresion -> . PIZQ valor operadorMat expresion PDER
    (70) valor -> . ENTERO
    (71) valor -> . variables
    (72) valor -> . CADENA
    (73) valor -> . HASH
    (74) valor -> . ARRAY
    (75) valor -> . split
    (76) valor -> . include
    (77) valor -> . reverse
    (78) variables -> . VARIABLE_LOCAL
    (79) variables -> . VARIABLE_GLOBAL
    (80) variables -> . VARIABLE_OBJETO
    (81) variables -> . VARIABLE_CLASE
    (82) variables -> . CONSTANTE
    (23) split -> . CADENA PUNTO SPLIT PIZQ valorsplit PDER
    (30) include -> . CADENA PUNTO INCLUDE INTERROGACION CADENA
    (22) reverse -> . CADENA PUNTO REVERSE

    PIZQ            shift and go to state 62
    ENTERO          shift and go to state 42
    CADENA          shift and go to state 44
    HASH            shift and go to state 45
    ARRAY           shift and go to state 46
    VARIABLE_LOCAL  shift and go to state 29
    VARIABLE_GLOBAL shift and go to state 30
    VARIABLE_OBJETO shift and go to state 31
    VARIABLE_CLASE  shift and go to state 32
    CONSTANTE       shift and go to state 33

    expresion                      shift and go to state 137
    valor                          shift and go to state 41
    variables                      shift and go to state 43
    split                          shift and go to state 47
    include                        shift and go to state 48
    reverse                        shift and go to state 49

state 107

    (52) expresion -> PIZQ valor operadorMat . expresion PDER
    (51) expresion -> valor operadorMat . expresion
    (46) expresion -> . valor
    (51) expresion -> . valor operadorMat expresion
    (52) expresion -> . PIZQ valor operadorMat expresion PDER
    (70) valor -> . ENTERO
    (71) valor -> . variables
    (72) valor -> . CADENA
    (73) valor -> . HASH
    (74) valor -> . ARRAY
    (75) valor -> . split
    (76) valor -> . include
    (77) valor -> . reverse
    (78) variables -> . VARIABLE_LOCAL
    (79) variables -> . VARIABLE_GLOBAL
    (80) variables -> . VARIABLE_OBJETO
    (81) variables -> . VARIABLE_CLASE
    (82) variables -> . CONSTANTE
    (23) split -> . CADENA PUNTO SPLIT PIZQ valorsplit PDER
    (30) include -> . CADENA PUNTO INCLUDE INTERROGACION CADENA
    (22) reverse -> . CADENA PUNTO REVERSE

    PIZQ            shift and go to state 62
    ENTERO          shift and go to state 42
    CADENA          shift and go to state 44
    HASH            shift and go to state 45
    ARRAY           shift and go to state 46
    VARIABLE_LOCAL  shift and go to state 29
    VARIABLE_GLOBAL shift and go to state 30
    VARIABLE_OBJETO shift and go to state 31
    VARIABLE_CLASE  shift and go to state 32
    CONSTANTE       shift and go to state 33

    valor                          shift and go to state 41
    expresion                      shift and go to state 138
    variables                      shift and go to state 43
    split                          shift and go to state 47
    include                        shift and go to state 48
    reverse                        shift and go to state 49

state 108

    (51) expresion -> valor operadorMat expresion .

    MAYOR           reduce using rule 51 (expresion -> valor operadorMat expresion .)
    MENOR           reduce using rule 51 (expresion -> valor operadorMat expresion .)
    COMP_IGUAL      reduce using rule 51 (expresion -> valor operadorMat expresion .)
    DIFERENTE       reduce using rule 51 (expresion -> valor operadorMat expresion .)
    WHILE           reduce using rule 51 (expresion -> valor operadorMat expresion .)
    FOR             reduce using rule 51 (expresion -> valor operadorMat expresion .)
    PUTS            reduce using rule 51 (expresion -> valor operadorMat expresion .)
    UNLESS          reduce using rule 51 (expresion -> valor operadorMat expresion .)
    COMENTARIO      reduce using rule 51 (expresion -> valor operadorMat expresion .)
    IF              reduce using rule 51 (expresion -> valor operadorMat expresion .)
    CASE            reduce using rule 51 (expresion -> valor operadorMat expresion .)
    BEGIN           reduce using rule 51 (expresion -> valor operadorMat expresion .)
    FUNCION         reduce using rule 51 (expresion -> valor operadorMat expresion .)
    CADENA          reduce using rule 51 (expresion -> valor operadorMat expresion .)
    VARIABLE_LOCAL  reduce using rule 51 (expresion -> valor operadorMat expresion .)
    VARIABLE_GLOBAL reduce using rule 51 (expresion -> valor operadorMat expresion .)
    VARIABLE_OBJETO reduce using rule 51 (expresion -> valor operadorMat expresion .)
    VARIABLE_CLASE  reduce using rule 51 (expresion -> valor operadorMat expresion .)
    CONSTANTE       reduce using rule 51 (expresion -> valor operadorMat expresion .)
    $end            reduce using rule 51 (expresion -> valor operadorMat expresion .)
    END             reduce using rule 51 (expresion -> valor operadorMat expresion .)
    BREAK           reduce using rule 51 (expresion -> valor operadorMat expresion .)
    WHEN            reduce using rule 51 (expresion -> valor operadorMat expresion .)
    ELSE            reduce using rule 51 (expresion -> valor operadorMat expresion .)
    DO              reduce using rule 51 (expresion -> valor operadorMat expresion .)
    AND             reduce using rule 51 (expresion -> valor operadorMat expresion .)
    OR              reduce using rule 51 (expresion -> valor operadorMat expresion .)
    PDER            reduce using rule 51 (expresion -> valor operadorMat expresion .)


state 109

    (30) include -> CADENA PUNTO INCLUDE . INTERROGACION CADENA

    INTERROGACION   shift and go to state 139


state 110

    (22) reverse -> CADENA PUNTO REVERSE .

    MAS             reduce using rule 22 (reverse -> CADENA PUNTO REVERSE .)
    RESTA           reduce using rule 22 (reverse -> CADENA PUNTO REVERSE .)
    PROD            reduce using rule 22 (reverse -> CADENA PUNTO REVERSE .)
    DIVISION        reduce using rule 22 (reverse -> CADENA PUNTO REVERSE .)
    POTENCIA        reduce using rule 22 (reverse -> CADENA PUNTO REVERSE .)
    MAYOR           reduce using rule 22 (reverse -> CADENA PUNTO REVERSE .)
    MENOR           reduce using rule 22 (reverse -> CADENA PUNTO REVERSE .)
    COMP_IGUAL      reduce using rule 22 (reverse -> CADENA PUNTO REVERSE .)
    DIFERENTE       reduce using rule 22 (reverse -> CADENA PUNTO REVERSE .)
    WHILE           reduce using rule 22 (reverse -> CADENA PUNTO REVERSE .)
    FOR             reduce using rule 22 (reverse -> CADENA PUNTO REVERSE .)
    PUTS            reduce using rule 22 (reverse -> CADENA PUNTO REVERSE .)
    UNLESS          reduce using rule 22 (reverse -> CADENA PUNTO REVERSE .)
    COMENTARIO      reduce using rule 22 (reverse -> CADENA PUNTO REVERSE .)
    IF              reduce using rule 22 (reverse -> CADENA PUNTO REVERSE .)
    CASE            reduce using rule 22 (reverse -> CADENA PUNTO REVERSE .)
    BEGIN           reduce using rule 22 (reverse -> CADENA PUNTO REVERSE .)
    FUNCION         reduce using rule 22 (reverse -> CADENA PUNTO REVERSE .)
    CADENA          reduce using rule 22 (reverse -> CADENA PUNTO REVERSE .)
    VARIABLE_LOCAL  reduce using rule 22 (reverse -> CADENA PUNTO REVERSE .)
    VARIABLE_GLOBAL reduce using rule 22 (reverse -> CADENA PUNTO REVERSE .)
    VARIABLE_OBJETO reduce using rule 22 (reverse -> CADENA PUNTO REVERSE .)
    VARIABLE_CLASE  reduce using rule 22 (reverse -> CADENA PUNTO REVERSE .)
    CONSTANTE       reduce using rule 22 (reverse -> CADENA PUNTO REVERSE .)
    $end            reduce using rule 22 (reverse -> CADENA PUNTO REVERSE .)
    END             reduce using rule 22 (reverse -> CADENA PUNTO REVERSE .)
    BREAK           reduce using rule 22 (reverse -> CADENA PUNTO REVERSE .)
    WHEN            reduce using rule 22 (reverse -> CADENA PUNTO REVERSE .)
    ELSE            reduce using rule 22 (reverse -> CADENA PUNTO REVERSE .)
    PDER            reduce using rule 22 (reverse -> CADENA PUNTO REVERSE .)
    DO              reduce using rule 22 (reverse -> CADENA PUNTO REVERSE .)
    AND             reduce using rule 22 (reverse -> CADENA PUNTO REVERSE .)
    OR              reduce using rule 22 (reverse -> CADENA PUNTO REVERSE .)


state 111

    (19) sentenciaFOR -> FOR variables IN range . DO codigo END

    DO              shift and go to state 140


state 112

    (20) range -> ENTERO . RANGO ENTERO

    RANGO           shift and go to state 141


state 113

    (18) unless -> UNLESS comparacion codigo END .

    WHILE           reduce using rule 18 (unless -> UNLESS comparacion codigo END .)
    FOR             reduce using rule 18 (unless -> UNLESS comparacion codigo END .)
    PUTS            reduce using rule 18 (unless -> UNLESS comparacion codigo END .)
    UNLESS          reduce using rule 18 (unless -> UNLESS comparacion codigo END .)
    COMENTARIO      reduce using rule 18 (unless -> UNLESS comparacion codigo END .)
    IF              reduce using rule 18 (unless -> UNLESS comparacion codigo END .)
    CASE            reduce using rule 18 (unless -> UNLESS comparacion codigo END .)
    BEGIN           reduce using rule 18 (unless -> UNLESS comparacion codigo END .)
    FUNCION         reduce using rule 18 (unless -> UNLESS comparacion codigo END .)
    CADENA          reduce using rule 18 (unless -> UNLESS comparacion codigo END .)
    VARIABLE_LOCAL  reduce using rule 18 (unless -> UNLESS comparacion codigo END .)
    VARIABLE_GLOBAL reduce using rule 18 (unless -> UNLESS comparacion codigo END .)
    VARIABLE_OBJETO reduce using rule 18 (unless -> UNLESS comparacion codigo END .)
    VARIABLE_CLASE  reduce using rule 18 (unless -> UNLESS comparacion codigo END .)
    CONSTANTE       reduce using rule 18 (unless -> UNLESS comparacion codigo END .)
    $end            reduce using rule 18 (unless -> UNLESS comparacion codigo END .)
    END             reduce using rule 18 (unless -> UNLESS comparacion codigo END .)
    BREAK           reduce using rule 18 (unless -> UNLESS comparacion codigo END .)
    WHEN            reduce using rule 18 (unless -> UNLESS comparacion codigo END .)
    ELSE            reduce using rule 18 (unless -> UNLESS comparacion codigo END .)


state 114

    (83) sentenciaIf -> IF comparaciones codigo finalIf .

    WHILE           reduce using rule 83 (sentenciaIf -> IF comparaciones codigo finalIf .)
    FOR             reduce using rule 83 (sentenciaIf -> IF comparaciones codigo finalIf .)
    PUTS            reduce using rule 83 (sentenciaIf -> IF comparaciones codigo finalIf .)
    UNLESS          reduce using rule 83 (sentenciaIf -> IF comparaciones codigo finalIf .)
    COMENTARIO      reduce using rule 83 (sentenciaIf -> IF comparaciones codigo finalIf .)
    IF              reduce using rule 83 (sentenciaIf -> IF comparaciones codigo finalIf .)
    CASE            reduce using rule 83 (sentenciaIf -> IF comparaciones codigo finalIf .)
    BEGIN           reduce using rule 83 (sentenciaIf -> IF comparaciones codigo finalIf .)
    FUNCION         reduce using rule 83 (sentenciaIf -> IF comparaciones codigo finalIf .)
    CADENA          reduce using rule 83 (sentenciaIf -> IF comparaciones codigo finalIf .)
    VARIABLE_LOCAL  reduce using rule 83 (sentenciaIf -> IF comparaciones codigo finalIf .)
    VARIABLE_GLOBAL reduce using rule 83 (sentenciaIf -> IF comparaciones codigo finalIf .)
    VARIABLE_OBJETO reduce using rule 83 (sentenciaIf -> IF comparaciones codigo finalIf .)
    VARIABLE_CLASE  reduce using rule 83 (sentenciaIf -> IF comparaciones codigo finalIf .)
    CONSTANTE       reduce using rule 83 (sentenciaIf -> IF comparaciones codigo finalIf .)
    $end            reduce using rule 83 (sentenciaIf -> IF comparaciones codigo finalIf .)
    END             reduce using rule 83 (sentenciaIf -> IF comparaciones codigo finalIf .)
    BREAK           reduce using rule 83 (sentenciaIf -> IF comparaciones codigo finalIf .)
    WHEN            reduce using rule 83 (sentenciaIf -> IF comparaciones codigo finalIf .)
    ELSE            reduce using rule 83 (sentenciaIf -> IF comparaciones codigo finalIf .)


state 115

    (84) finalIf -> END .

    WHILE           reduce using rule 84 (finalIf -> END .)
    FOR             reduce using rule 84 (finalIf -> END .)
    PUTS            reduce using rule 84 (finalIf -> END .)
    UNLESS          reduce using rule 84 (finalIf -> END .)
    COMENTARIO      reduce using rule 84 (finalIf -> END .)
    IF              reduce using rule 84 (finalIf -> END .)
    CASE            reduce using rule 84 (finalIf -> END .)
    BEGIN           reduce using rule 84 (finalIf -> END .)
    FUNCION         reduce using rule 84 (finalIf -> END .)
    CADENA          reduce using rule 84 (finalIf -> END .)
    VARIABLE_LOCAL  reduce using rule 84 (finalIf -> END .)
    VARIABLE_GLOBAL reduce using rule 84 (finalIf -> END .)
    VARIABLE_OBJETO reduce using rule 84 (finalIf -> END .)
    VARIABLE_CLASE  reduce using rule 84 (finalIf -> END .)
    CONSTANTE       reduce using rule 84 (finalIf -> END .)
    $end            reduce using rule 84 (finalIf -> END .)
    END             reduce using rule 84 (finalIf -> END .)
    BREAK           reduce using rule 84 (finalIf -> END .)
    WHEN            reduce using rule 84 (finalIf -> END .)
    ELSE            reduce using rule 84 (finalIf -> END .)


state 116

    (85) finalIf -> sentenciaBREAK . END

    END             shift and go to state 142


state 117

    (59) sentenciaBREAK -> BREAK .
    (60) sentenciaBREAK -> BREAK . variables
    (78) variables -> . VARIABLE_LOCAL
    (79) variables -> . VARIABLE_GLOBAL
    (80) variables -> . VARIABLE_OBJETO
    (81) variables -> . VARIABLE_CLASE
    (82) variables -> . CONSTANTE

    END             reduce using rule 59 (sentenciaBREAK -> BREAK .)
    VARIABLE_LOCAL  shift and go to state 29
    VARIABLE_GLOBAL shift and go to state 30
    VARIABLE_OBJETO shift and go to state 31
    VARIABLE_CLASE  shift and go to state 32
    CONSTANTE       shift and go to state 33

    variables                      shift and go to state 143

state 118

    (36) sentenciaAND -> comparacion AND comparacion .

    WHILE           reduce using rule 36 (sentenciaAND -> comparacion AND comparacion .)
    FOR             reduce using rule 36 (sentenciaAND -> comparacion AND comparacion .)
    PUTS            reduce using rule 36 (sentenciaAND -> comparacion AND comparacion .)
    UNLESS          reduce using rule 36 (sentenciaAND -> comparacion AND comparacion .)
    COMENTARIO      reduce using rule 36 (sentenciaAND -> comparacion AND comparacion .)
    IF              reduce using rule 36 (sentenciaAND -> comparacion AND comparacion .)
    CASE            reduce using rule 36 (sentenciaAND -> comparacion AND comparacion .)
    BEGIN           reduce using rule 36 (sentenciaAND -> comparacion AND comparacion .)
    FUNCION         reduce using rule 36 (sentenciaAND -> comparacion AND comparacion .)
    CADENA          reduce using rule 36 (sentenciaAND -> comparacion AND comparacion .)
    VARIABLE_LOCAL  reduce using rule 36 (sentenciaAND -> comparacion AND comparacion .)
    VARIABLE_GLOBAL reduce using rule 36 (sentenciaAND -> comparacion AND comparacion .)
    VARIABLE_OBJETO reduce using rule 36 (sentenciaAND -> comparacion AND comparacion .)
    VARIABLE_CLASE  reduce using rule 36 (sentenciaAND -> comparacion AND comparacion .)
    CONSTANTE       reduce using rule 36 (sentenciaAND -> comparacion AND comparacion .)


state 119

    (37) sentenciaOR -> comparacion OR comparacion .

    WHILE           reduce using rule 37 (sentenciaOR -> comparacion OR comparacion .)
    FOR             reduce using rule 37 (sentenciaOR -> comparacion OR comparacion .)
    PUTS            reduce using rule 37 (sentenciaOR -> comparacion OR comparacion .)
    UNLESS          reduce using rule 37 (sentenciaOR -> comparacion OR comparacion .)
    COMENTARIO      reduce using rule 37 (sentenciaOR -> comparacion OR comparacion .)
    IF              reduce using rule 37 (sentenciaOR -> comparacion OR comparacion .)
    CASE            reduce using rule 37 (sentenciaOR -> comparacion OR comparacion .)
    BEGIN           reduce using rule 37 (sentenciaOR -> comparacion OR comparacion .)
    FUNCION         reduce using rule 37 (sentenciaOR -> comparacion OR comparacion .)
    CADENA          reduce using rule 37 (sentenciaOR -> comparacion OR comparacion .)
    VARIABLE_LOCAL  reduce using rule 37 (sentenciaOR -> comparacion OR comparacion .)
    VARIABLE_GLOBAL reduce using rule 37 (sentenciaOR -> comparacion OR comparacion .)
    VARIABLE_OBJETO reduce using rule 37 (sentenciaOR -> comparacion OR comparacion .)
    VARIABLE_CLASE  reduce using rule 37 (sentenciaOR -> comparacion OR comparacion .)
    CONSTANTE       reduce using rule 37 (sentenciaOR -> comparacion OR comparacion .)


state 120

    (33) sentenciaCASE -> CASE variables sentenciaWhens ELSE . codigo END
    (1) codigo -> . algoritmo
    (2) codigo -> . algoritmo codigo
    (3) algoritmo -> . asignacion
    (4) algoritmo -> . sentenciaWHILE
    (5) algoritmo -> . sentenciaFOR
    (6) algoritmo -> . puts
    (7) algoritmo -> . unless
    (8) algoritmo -> . comentarios
    (9) algoritmo -> . sentenciaIf
    (10) algoritmo -> . sentenciaCASE
    (11) algoritmo -> . slicing
    (12) algoritmo -> . sentenciaBegin
    (13) algoritmo -> . sentenciaFuncion
    (14) algoritmo -> . split
    (15) algoritmo -> . push
    (16) algoritmo -> . append
    (17) algoritmo -> . pop
    (45) asignacion -> . variables IGUAL expresion
    (32) sentenciaWHILE -> . WHILE comparacion DO codigo END
    (19) sentenciaFOR -> . FOR variables IN range DO codigo END
    (21) puts -> . PUTS valor
    (18) unless -> . UNLESS comparacion codigo END
    (86) comentarios -> . COMENTARIO
    (83) sentenciaIf -> . IF comparaciones codigo finalIf
    (33) sentenciaCASE -> . CASE variables sentenciaWhens ELSE codigo END
    (47) slicing -> . variables CIZQ ENTERO CDER
    (48) slicing -> . variables CIZQ ENTERO COMA ENTERO CDER
    (49) slicing -> . variables CIZQ RANGO CDER
    (50) slicing -> . variables CIZQ CADENA CDER
    (44) sentenciaBegin -> . BEGIN codigo END
    (31) sentenciaFuncion -> . FUNCION variables codigo END
    (23) split -> . CADENA PUNTO SPLIT PIZQ valorsplit PDER
    (24) push -> . variables PUNTO PUSH PIZQ valor PDER
    (25) append -> . variables PUNTO APPEND PIZQ valor PDER
    (26) pop -> . variables PUNTO POP PIZQ valor PDER
    (27) pop -> . variables PUNTO POP PIZQ PDER
    (78) variables -> . VARIABLE_LOCAL
    (79) variables -> . VARIABLE_GLOBAL
    (80) variables -> . VARIABLE_OBJETO
    (81) variables -> . VARIABLE_CLASE
    (82) variables -> . CONSTANTE

    WHILE           shift and go to state 19
    FOR             shift and go to state 20
    PUTS            shift and go to state 21
    UNLESS          shift and go to state 22
    COMENTARIO      shift and go to state 23
    IF              shift and go to state 24
    CASE            shift and go to state 25
    BEGIN           shift and go to state 27
    FUNCION         shift and go to state 28
    CADENA          shift and go to state 26
    VARIABLE_LOCAL  shift and go to state 29
    VARIABLE_GLOBAL shift and go to state 30
    VARIABLE_OBJETO shift and go to state 31
    VARIABLE_CLASE  shift and go to state 32
    CONSTANTE       shift and go to state 33

    variables                      shift and go to state 18
    codigo                         shift and go to state 144
    algoritmo                      shift and go to state 2
    asignacion                     shift and go to state 3
    sentenciaWHILE                 shift and go to state 4
    sentenciaFOR                   shift and go to state 5
    puts                           shift and go to state 6
    unless                         shift and go to state 7
    comentarios                    shift and go to state 8
    sentenciaIf                    shift and go to state 9
    sentenciaCASE                  shift and go to state 10
    slicing                        shift and go to state 11
    sentenciaBegin                 shift and go to state 12
    sentenciaFuncion               shift and go to state 13
    split                          shift and go to state 14
    push                           shift and go to state 15
    append                         shift and go to state 16
    pop                            shift and go to state 17

state 121

    (39) sentenciaWhens -> sentenciaWHEN sentenciaWhens .

    ELSE            reduce using rule 39 (sentenciaWhens -> sentenciaWHEN sentenciaWhens .)


state 122

    (34) sentenciaWHEN -> WHEN valorSencillo . codigo
    (35) sentenciaWHEN -> WHEN valorSencillo . THEN codigo
    (1) codigo -> . algoritmo
    (2) codigo -> . algoritmo codigo
    (3) algoritmo -> . asignacion
    (4) algoritmo -> . sentenciaWHILE
    (5) algoritmo -> . sentenciaFOR
    (6) algoritmo -> . puts
    (7) algoritmo -> . unless
    (8) algoritmo -> . comentarios
    (9) algoritmo -> . sentenciaIf
    (10) algoritmo -> . sentenciaCASE
    (11) algoritmo -> . slicing
    (12) algoritmo -> . sentenciaBegin
    (13) algoritmo -> . sentenciaFuncion
    (14) algoritmo -> . split
    (15) algoritmo -> . push
    (16) algoritmo -> . append
    (17) algoritmo -> . pop
    (45) asignacion -> . variables IGUAL expresion
    (32) sentenciaWHILE -> . WHILE comparacion DO codigo END
    (19) sentenciaFOR -> . FOR variables IN range DO codigo END
    (21) puts -> . PUTS valor
    (18) unless -> . UNLESS comparacion codigo END
    (86) comentarios -> . COMENTARIO
    (83) sentenciaIf -> . IF comparaciones codigo finalIf
    (33) sentenciaCASE -> . CASE variables sentenciaWhens ELSE codigo END
    (47) slicing -> . variables CIZQ ENTERO CDER
    (48) slicing -> . variables CIZQ ENTERO COMA ENTERO CDER
    (49) slicing -> . variables CIZQ RANGO CDER
    (50) slicing -> . variables CIZQ CADENA CDER
    (44) sentenciaBegin -> . BEGIN codigo END
    (31) sentenciaFuncion -> . FUNCION variables codigo END
    (23) split -> . CADENA PUNTO SPLIT PIZQ valorsplit PDER
    (24) push -> . variables PUNTO PUSH PIZQ valor PDER
    (25) append -> . variables PUNTO APPEND PIZQ valor PDER
    (26) pop -> . variables PUNTO POP PIZQ valor PDER
    (27) pop -> . variables PUNTO POP PIZQ PDER
    (78) variables -> . VARIABLE_LOCAL
    (79) variables -> . VARIABLE_GLOBAL
    (80) variables -> . VARIABLE_OBJETO
    (81) variables -> . VARIABLE_CLASE
    (82) variables -> . CONSTANTE

    THEN            shift and go to state 146
    WHILE           shift and go to state 19
    FOR             shift and go to state 20
    PUTS            shift and go to state 21
    UNLESS          shift and go to state 22
    COMENTARIO      shift and go to state 23
    IF              shift and go to state 24
    CASE            shift and go to state 25
    BEGIN           shift and go to state 27
    FUNCION         shift and go to state 28
    CADENA          shift and go to state 26
    VARIABLE_LOCAL  shift and go to state 29
    VARIABLE_GLOBAL shift and go to state 30
    VARIABLE_OBJETO shift and go to state 31
    VARIABLE_CLASE  shift and go to state 32
    CONSTANTE       shift and go to state 33

    codigo                         shift and go to state 145
    algoritmo                      shift and go to state 2
    asignacion                     shift and go to state 3
    sentenciaWHILE                 shift and go to state 4
    sentenciaFOR                   shift and go to state 5
    puts                           shift and go to state 6
    unless                         shift and go to state 7
    comentarios                    shift and go to state 8
    sentenciaIf                    shift and go to state 9
    sentenciaCASE                  shift and go to state 10
    slicing                        shift and go to state 11
    sentenciaBegin                 shift and go to state 12
    sentenciaFuncion               shift and go to state 13
    split                          shift and go to state 14
    push                           shift and go to state 15
    append                         shift and go to state 16
    pop                            shift and go to state 17
    variables                      shift and go to state 18

state 123

    (40) valorSencillo -> ENTERO .

    THEN            reduce using rule 40 (valorSencillo -> ENTERO .)
    WHILE           reduce using rule 40 (valorSencillo -> ENTERO .)
    FOR             reduce using rule 40 (valorSencillo -> ENTERO .)
    PUTS            reduce using rule 40 (valorSencillo -> ENTERO .)
    UNLESS          reduce using rule 40 (valorSencillo -> ENTERO .)
    COMENTARIO      reduce using rule 40 (valorSencillo -> ENTERO .)
    IF              reduce using rule 40 (valorSencillo -> ENTERO .)
    CASE            reduce using rule 40 (valorSencillo -> ENTERO .)
    BEGIN           reduce using rule 40 (valorSencillo -> ENTERO .)
    FUNCION         reduce using rule 40 (valorSencillo -> ENTERO .)
    CADENA          reduce using rule 40 (valorSencillo -> ENTERO .)
    VARIABLE_LOCAL  reduce using rule 40 (valorSencillo -> ENTERO .)
    VARIABLE_GLOBAL reduce using rule 40 (valorSencillo -> ENTERO .)
    VARIABLE_OBJETO reduce using rule 40 (valorSencillo -> ENTERO .)
    VARIABLE_CLASE  reduce using rule 40 (valorSencillo -> ENTERO .)
    CONSTANTE       reduce using rule 40 (valorSencillo -> ENTERO .)


state 124

    (41) valorSencillo -> variables .

    THEN            reduce using rule 41 (valorSencillo -> variables .)
    WHILE           reduce using rule 41 (valorSencillo -> variables .)
    FOR             reduce using rule 41 (valorSencillo -> variables .)
    PUTS            reduce using rule 41 (valorSencillo -> variables .)
    UNLESS          reduce using rule 41 (valorSencillo -> variables .)
    COMENTARIO      reduce using rule 41 (valorSencillo -> variables .)
    IF              reduce using rule 41 (valorSencillo -> variables .)
    CASE            reduce using rule 41 (valorSencillo -> variables .)
    BEGIN           reduce using rule 41 (valorSencillo -> variables .)
    FUNCION         reduce using rule 41 (valorSencillo -> variables .)
    CADENA          reduce using rule 41 (valorSencillo -> variables .)
    VARIABLE_LOCAL  reduce using rule 41 (valorSencillo -> variables .)
    VARIABLE_GLOBAL reduce using rule 41 (valorSencillo -> variables .)
    VARIABLE_OBJETO reduce using rule 41 (valorSencillo -> variables .)
    VARIABLE_CLASE  reduce using rule 41 (valorSencillo -> variables .)
    CONSTANTE       reduce using rule 41 (valorSencillo -> variables .)


state 125

    (42) valorSencillo -> CADENA .

    THEN            reduce using rule 42 (valorSencillo -> CADENA .)
    WHILE           reduce using rule 42 (valorSencillo -> CADENA .)
    FOR             reduce using rule 42 (valorSencillo -> CADENA .)
    PUTS            reduce using rule 42 (valorSencillo -> CADENA .)
    UNLESS          reduce using rule 42 (valorSencillo -> CADENA .)
    COMENTARIO      reduce using rule 42 (valorSencillo -> CADENA .)
    IF              reduce using rule 42 (valorSencillo -> CADENA .)
    CASE            reduce using rule 42 (valorSencillo -> CADENA .)
    BEGIN           reduce using rule 42 (valorSencillo -> CADENA .)
    FUNCION         reduce using rule 42 (valorSencillo -> CADENA .)
    CADENA          reduce using rule 42 (valorSencillo -> CADENA .)
    VARIABLE_LOCAL  reduce using rule 42 (valorSencillo -> CADENA .)
    VARIABLE_GLOBAL reduce using rule 42 (valorSencillo -> CADENA .)
    VARIABLE_OBJETO reduce using rule 42 (valorSencillo -> CADENA .)
    VARIABLE_CLASE  reduce using rule 42 (valorSencillo -> CADENA .)
    CONSTANTE       reduce using rule 42 (valorSencillo -> CADENA .)


state 126

    (43) valorSencillo -> RANGO .

    THEN            reduce using rule 43 (valorSencillo -> RANGO .)
    WHILE           reduce using rule 43 (valorSencillo -> RANGO .)
    FOR             reduce using rule 43 (valorSencillo -> RANGO .)
    PUTS            reduce using rule 43 (valorSencillo -> RANGO .)
    UNLESS          reduce using rule 43 (valorSencillo -> RANGO .)
    COMENTARIO      reduce using rule 43 (valorSencillo -> RANGO .)
    IF              reduce using rule 43 (valorSencillo -> RANGO .)
    CASE            reduce using rule 43 (valorSencillo -> RANGO .)
    BEGIN           reduce using rule 43 (valorSencillo -> RANGO .)
    FUNCION         reduce using rule 43 (valorSencillo -> RANGO .)
    CADENA          reduce using rule 43 (valorSencillo -> RANGO .)
    VARIABLE_LOCAL  reduce using rule 43 (valorSencillo -> RANGO .)
    VARIABLE_GLOBAL reduce using rule 43 (valorSencillo -> RANGO .)
    VARIABLE_OBJETO reduce using rule 43 (valorSencillo -> RANGO .)
    VARIABLE_CLASE  reduce using rule 43 (valorSencillo -> RANGO .)
    CONSTANTE       reduce using rule 43 (valorSencillo -> RANGO .)


state 127

    (23) split -> CADENA PUNTO SPLIT PIZQ . valorsplit PDER
    (28) valorsplit -> . CADENA
    (29) valorsplit -> . CADENA COMA ENTERO

    CADENA          shift and go to state 147

    valorsplit                     shift and go to state 148

state 128

    (31) sentenciaFuncion -> FUNCION variables codigo END .

    WHILE           reduce using rule 31 (sentenciaFuncion -> FUNCION variables codigo END .)
    FOR             reduce using rule 31 (sentenciaFuncion -> FUNCION variables codigo END .)
    PUTS            reduce using rule 31 (sentenciaFuncion -> FUNCION variables codigo END .)
    UNLESS          reduce using rule 31 (sentenciaFuncion -> FUNCION variables codigo END .)
    COMENTARIO      reduce using rule 31 (sentenciaFuncion -> FUNCION variables codigo END .)
    IF              reduce using rule 31 (sentenciaFuncion -> FUNCION variables codigo END .)
    CASE            reduce using rule 31 (sentenciaFuncion -> FUNCION variables codigo END .)
    BEGIN           reduce using rule 31 (sentenciaFuncion -> FUNCION variables codigo END .)
    FUNCION         reduce using rule 31 (sentenciaFuncion -> FUNCION variables codigo END .)
    CADENA          reduce using rule 31 (sentenciaFuncion -> FUNCION variables codigo END .)
    VARIABLE_LOCAL  reduce using rule 31 (sentenciaFuncion -> FUNCION variables codigo END .)
    VARIABLE_GLOBAL reduce using rule 31 (sentenciaFuncion -> FUNCION variables codigo END .)
    VARIABLE_OBJETO reduce using rule 31 (sentenciaFuncion -> FUNCION variables codigo END .)
    VARIABLE_CLASE  reduce using rule 31 (sentenciaFuncion -> FUNCION variables codigo END .)
    CONSTANTE       reduce using rule 31 (sentenciaFuncion -> FUNCION variables codigo END .)
    $end            reduce using rule 31 (sentenciaFuncion -> FUNCION variables codigo END .)
    END             reduce using rule 31 (sentenciaFuncion -> FUNCION variables codigo END .)
    BREAK           reduce using rule 31 (sentenciaFuncion -> FUNCION variables codigo END .)
    WHEN            reduce using rule 31 (sentenciaFuncion -> FUNCION variables codigo END .)
    ELSE            reduce using rule 31 (sentenciaFuncion -> FUNCION variables codigo END .)


state 129

    (52) expresion -> PIZQ valor operadorMat . expresion PDER
    (46) expresion -> . valor
    (51) expresion -> . valor operadorMat expresion
    (52) expresion -> . PIZQ valor operadorMat expresion PDER
    (70) valor -> . ENTERO
    (71) valor -> . variables
    (72) valor -> . CADENA
    (73) valor -> . HASH
    (74) valor -> . ARRAY
    (75) valor -> . split
    (76) valor -> . include
    (77) valor -> . reverse
    (78) variables -> . VARIABLE_LOCAL
    (79) variables -> . VARIABLE_GLOBAL
    (80) variables -> . VARIABLE_OBJETO
    (81) variables -> . VARIABLE_CLASE
    (82) variables -> . CONSTANTE
    (23) split -> . CADENA PUNTO SPLIT PIZQ valorsplit PDER
    (30) include -> . CADENA PUNTO INCLUDE INTERROGACION CADENA
    (22) reverse -> . CADENA PUNTO REVERSE

    PIZQ            shift and go to state 62
    ENTERO          shift and go to state 42
    CADENA          shift and go to state 44
    HASH            shift and go to state 45
    ARRAY           shift and go to state 46
    VARIABLE_LOCAL  shift and go to state 29
    VARIABLE_GLOBAL shift and go to state 30
    VARIABLE_OBJETO shift and go to state 31
    VARIABLE_CLASE  shift and go to state 32
    CONSTANTE       shift and go to state 33

    valor                          shift and go to state 41
    expresion                      shift and go to state 149
    variables                      shift and go to state 43
    split                          shift and go to state 47
    include                        shift and go to state 48
    reverse                        shift and go to state 49

state 130

    (48) slicing -> variables CIZQ ENTERO COMA ENTERO . CDER

    CDER            shift and go to state 150


state 131

    (24) push -> variables PUNTO PUSH PIZQ valor . PDER

    PDER            shift and go to state 151


state 132

    (25) append -> variables PUNTO APPEND PIZQ valor . PDER

    PDER            shift and go to state 152


state 133

    (26) pop -> variables PUNTO POP PIZQ valor . PDER

    PDER            shift and go to state 153


state 134

    (27) pop -> variables PUNTO POP PIZQ PDER .

    WHILE           reduce using rule 27 (pop -> variables PUNTO POP PIZQ PDER .)
    FOR             reduce using rule 27 (pop -> variables PUNTO POP PIZQ PDER .)
    PUTS            reduce using rule 27 (pop -> variables PUNTO POP PIZQ PDER .)
    UNLESS          reduce using rule 27 (pop -> variables PUNTO POP PIZQ PDER .)
    COMENTARIO      reduce using rule 27 (pop -> variables PUNTO POP PIZQ PDER .)
    IF              reduce using rule 27 (pop -> variables PUNTO POP PIZQ PDER .)
    CASE            reduce using rule 27 (pop -> variables PUNTO POP PIZQ PDER .)
    BEGIN           reduce using rule 27 (pop -> variables PUNTO POP PIZQ PDER .)
    FUNCION         reduce using rule 27 (pop -> variables PUNTO POP PIZQ PDER .)
    CADENA          reduce using rule 27 (pop -> variables PUNTO POP PIZQ PDER .)
    VARIABLE_LOCAL  reduce using rule 27 (pop -> variables PUNTO POP PIZQ PDER .)
    VARIABLE_GLOBAL reduce using rule 27 (pop -> variables PUNTO POP PIZQ PDER .)
    VARIABLE_OBJETO reduce using rule 27 (pop -> variables PUNTO POP PIZQ PDER .)
    VARIABLE_CLASE  reduce using rule 27 (pop -> variables PUNTO POP PIZQ PDER .)
    CONSTANTE       reduce using rule 27 (pop -> variables PUNTO POP PIZQ PDER .)
    $end            reduce using rule 27 (pop -> variables PUNTO POP PIZQ PDER .)
    END             reduce using rule 27 (pop -> variables PUNTO POP PIZQ PDER .)
    BREAK           reduce using rule 27 (pop -> variables PUNTO POP PIZQ PDER .)
    WHEN            reduce using rule 27 (pop -> variables PUNTO POP PIZQ PDER .)
    ELSE            reduce using rule 27 (pop -> variables PUNTO POP PIZQ PDER .)


state 135

    (32) sentenciaWHILE -> WHILE comparacion DO codigo END .

    WHILE           reduce using rule 32 (sentenciaWHILE -> WHILE comparacion DO codigo END .)
    FOR             reduce using rule 32 (sentenciaWHILE -> WHILE comparacion DO codigo END .)
    PUTS            reduce using rule 32 (sentenciaWHILE -> WHILE comparacion DO codigo END .)
    UNLESS          reduce using rule 32 (sentenciaWHILE -> WHILE comparacion DO codigo END .)
    COMENTARIO      reduce using rule 32 (sentenciaWHILE -> WHILE comparacion DO codigo END .)
    IF              reduce using rule 32 (sentenciaWHILE -> WHILE comparacion DO codigo END .)
    CASE            reduce using rule 32 (sentenciaWHILE -> WHILE comparacion DO codigo END .)
    BEGIN           reduce using rule 32 (sentenciaWHILE -> WHILE comparacion DO codigo END .)
    FUNCION         reduce using rule 32 (sentenciaWHILE -> WHILE comparacion DO codigo END .)
    CADENA          reduce using rule 32 (sentenciaWHILE -> WHILE comparacion DO codigo END .)
    VARIABLE_LOCAL  reduce using rule 32 (sentenciaWHILE -> WHILE comparacion DO codigo END .)
    VARIABLE_GLOBAL reduce using rule 32 (sentenciaWHILE -> WHILE comparacion DO codigo END .)
    VARIABLE_OBJETO reduce using rule 32 (sentenciaWHILE -> WHILE comparacion DO codigo END .)
    VARIABLE_CLASE  reduce using rule 32 (sentenciaWHILE -> WHILE comparacion DO codigo END .)
    CONSTANTE       reduce using rule 32 (sentenciaWHILE -> WHILE comparacion DO codigo END .)
    $end            reduce using rule 32 (sentenciaWHILE -> WHILE comparacion DO codigo END .)
    END             reduce using rule 32 (sentenciaWHILE -> WHILE comparacion DO codigo END .)
    BREAK           reduce using rule 32 (sentenciaWHILE -> WHILE comparacion DO codigo END .)
    WHEN            reduce using rule 32 (sentenciaWHILE -> WHILE comparacion DO codigo END .)
    ELSE            reduce using rule 32 (sentenciaWHILE -> WHILE comparacion DO codigo END .)


state 136

    (54) comparacion -> PIZQ expresion PDER operadorComp . expresion
    (46) expresion -> . valor
    (51) expresion -> . valor operadorMat expresion
    (52) expresion -> . PIZQ valor operadorMat expresion PDER
    (70) valor -> . ENTERO
    (71) valor -> . variables
    (72) valor -> . CADENA
    (73) valor -> . HASH
    (74) valor -> . ARRAY
    (75) valor -> . split
    (76) valor -> . include
    (77) valor -> . reverse
    (78) variables -> . VARIABLE_LOCAL
    (79) variables -> . VARIABLE_GLOBAL
    (80) variables -> . VARIABLE_OBJETO
    (81) variables -> . VARIABLE_CLASE
    (82) variables -> . CONSTANTE
    (23) split -> . CADENA PUNTO SPLIT PIZQ valorsplit PDER
    (30) include -> . CADENA PUNTO INCLUDE INTERROGACION CADENA
    (22) reverse -> . CADENA PUNTO REVERSE

    PIZQ            shift and go to state 62
    ENTERO          shift and go to state 42
    CADENA          shift and go to state 44
    HASH            shift and go to state 45
    ARRAY           shift and go to state 46
    VARIABLE_LOCAL  shift and go to state 29
    VARIABLE_GLOBAL shift and go to state 30
    VARIABLE_OBJETO shift and go to state 31
    VARIABLE_CLASE  shift and go to state 32
    CONSTANTE       shift and go to state 33

    expresion                      shift and go to state 154
    valor                          shift and go to state 41
    variables                      shift and go to state 43
    split                          shift and go to state 47
    include                        shift and go to state 48
    reverse                        shift and go to state 49

state 137

    (55) comparacion -> PIZQ expresion operadorComp expresion . PDER

    PDER            shift and go to state 155


state 138

    (52) expresion -> PIZQ valor operadorMat expresion . PDER
    (51) expresion -> valor operadorMat expresion .

  ! shift/reduce conflict for PDER resolved as shift
    PDER            shift and go to state 156
    MAYOR           reduce using rule 51 (expresion -> valor operadorMat expresion .)
    MENOR           reduce using rule 51 (expresion -> valor operadorMat expresion .)
    COMP_IGUAL      reduce using rule 51 (expresion -> valor operadorMat expresion .)
    DIFERENTE       reduce using rule 51 (expresion -> valor operadorMat expresion .)

  ! PDER            [ reduce using rule 51 (expresion -> valor operadorMat expresion .) ]


state 139

    (30) include -> CADENA PUNTO INCLUDE INTERROGACION . CADENA

    CADENA          shift and go to state 157


state 140

    (19) sentenciaFOR -> FOR variables IN range DO . codigo END
    (1) codigo -> . algoritmo
    (2) codigo -> . algoritmo codigo
    (3) algoritmo -> . asignacion
    (4) algoritmo -> . sentenciaWHILE
    (5) algoritmo -> . sentenciaFOR
    (6) algoritmo -> . puts
    (7) algoritmo -> . unless
    (8) algoritmo -> . comentarios
    (9) algoritmo -> . sentenciaIf
    (10) algoritmo -> . sentenciaCASE
    (11) algoritmo -> . slicing
    (12) algoritmo -> . sentenciaBegin
    (13) algoritmo -> . sentenciaFuncion
    (14) algoritmo -> . split
    (15) algoritmo -> . push
    (16) algoritmo -> . append
    (17) algoritmo -> . pop
    (45) asignacion -> . variables IGUAL expresion
    (32) sentenciaWHILE -> . WHILE comparacion DO codigo END
    (19) sentenciaFOR -> . FOR variables IN range DO codigo END
    (21) puts -> . PUTS valor
    (18) unless -> . UNLESS comparacion codigo END
    (86) comentarios -> . COMENTARIO
    (83) sentenciaIf -> . IF comparaciones codigo finalIf
    (33) sentenciaCASE -> . CASE variables sentenciaWhens ELSE codigo END
    (47) slicing -> . variables CIZQ ENTERO CDER
    (48) slicing -> . variables CIZQ ENTERO COMA ENTERO CDER
    (49) slicing -> . variables CIZQ RANGO CDER
    (50) slicing -> . variables CIZQ CADENA CDER
    (44) sentenciaBegin -> . BEGIN codigo END
    (31) sentenciaFuncion -> . FUNCION variables codigo END
    (23) split -> . CADENA PUNTO SPLIT PIZQ valorsplit PDER
    (24) push -> . variables PUNTO PUSH PIZQ valor PDER
    (25) append -> . variables PUNTO APPEND PIZQ valor PDER
    (26) pop -> . variables PUNTO POP PIZQ valor PDER
    (27) pop -> . variables PUNTO POP PIZQ PDER
    (78) variables -> . VARIABLE_LOCAL
    (79) variables -> . VARIABLE_GLOBAL
    (80) variables -> . VARIABLE_OBJETO
    (81) variables -> . VARIABLE_CLASE
    (82) variables -> . CONSTANTE

    WHILE           shift and go to state 19
    FOR             shift and go to state 20
    PUTS            shift and go to state 21
    UNLESS          shift and go to state 22
    COMENTARIO      shift and go to state 23
    IF              shift and go to state 24
    CASE            shift and go to state 25
    BEGIN           shift and go to state 27
    FUNCION         shift and go to state 28
    CADENA          shift and go to state 26
    VARIABLE_LOCAL  shift and go to state 29
    VARIABLE_GLOBAL shift and go to state 30
    VARIABLE_OBJETO shift and go to state 31
    VARIABLE_CLASE  shift and go to state 32
    CONSTANTE       shift and go to state 33

    variables                      shift and go to state 18
    codigo                         shift and go to state 158
    algoritmo                      shift and go to state 2
    asignacion                     shift and go to state 3
    sentenciaWHILE                 shift and go to state 4
    sentenciaFOR                   shift and go to state 5
    puts                           shift and go to state 6
    unless                         shift and go to state 7
    comentarios                    shift and go to state 8
    sentenciaIf                    shift and go to state 9
    sentenciaCASE                  shift and go to state 10
    slicing                        shift and go to state 11
    sentenciaBegin                 shift and go to state 12
    sentenciaFuncion               shift and go to state 13
    split                          shift and go to state 14
    push                           shift and go to state 15
    append                         shift and go to state 16
    pop                            shift and go to state 17

state 141

    (20) range -> ENTERO RANGO . ENTERO

    ENTERO          shift and go to state 159


state 142

    (85) finalIf -> sentenciaBREAK END .

    WHILE           reduce using rule 85 (finalIf -> sentenciaBREAK END .)
    FOR             reduce using rule 85 (finalIf -> sentenciaBREAK END .)
    PUTS            reduce using rule 85 (finalIf -> sentenciaBREAK END .)
    UNLESS          reduce using rule 85 (finalIf -> sentenciaBREAK END .)
    COMENTARIO      reduce using rule 85 (finalIf -> sentenciaBREAK END .)
    IF              reduce using rule 85 (finalIf -> sentenciaBREAK END .)
    CASE            reduce using rule 85 (finalIf -> sentenciaBREAK END .)
    BEGIN           reduce using rule 85 (finalIf -> sentenciaBREAK END .)
    FUNCION         reduce using rule 85 (finalIf -> sentenciaBREAK END .)
    CADENA          reduce using rule 85 (finalIf -> sentenciaBREAK END .)
    VARIABLE_LOCAL  reduce using rule 85 (finalIf -> sentenciaBREAK END .)
    VARIABLE_GLOBAL reduce using rule 85 (finalIf -> sentenciaBREAK END .)
    VARIABLE_OBJETO reduce using rule 85 (finalIf -> sentenciaBREAK END .)
    VARIABLE_CLASE  reduce using rule 85 (finalIf -> sentenciaBREAK END .)
    CONSTANTE       reduce using rule 85 (finalIf -> sentenciaBREAK END .)
    $end            reduce using rule 85 (finalIf -> sentenciaBREAK END .)
    END             reduce using rule 85 (finalIf -> sentenciaBREAK END .)
    BREAK           reduce using rule 85 (finalIf -> sentenciaBREAK END .)
    WHEN            reduce using rule 85 (finalIf -> sentenciaBREAK END .)
    ELSE            reduce using rule 85 (finalIf -> sentenciaBREAK END .)


state 143

    (60) sentenciaBREAK -> BREAK variables .

    END             reduce using rule 60 (sentenciaBREAK -> BREAK variables .)


state 144

    (33) sentenciaCASE -> CASE variables sentenciaWhens ELSE codigo . END

    END             shift and go to state 160


state 145

    (34) sentenciaWHEN -> WHEN valorSencillo codigo .

    WHEN            reduce using rule 34 (sentenciaWHEN -> WHEN valorSencillo codigo .)
    ELSE            reduce using rule 34 (sentenciaWHEN -> WHEN valorSencillo codigo .)


state 146

    (35) sentenciaWHEN -> WHEN valorSencillo THEN . codigo
    (1) codigo -> . algoritmo
    (2) codigo -> . algoritmo codigo
    (3) algoritmo -> . asignacion
    (4) algoritmo -> . sentenciaWHILE
    (5) algoritmo -> . sentenciaFOR
    (6) algoritmo -> . puts
    (7) algoritmo -> . unless
    (8) algoritmo -> . comentarios
    (9) algoritmo -> . sentenciaIf
    (10) algoritmo -> . sentenciaCASE
    (11) algoritmo -> . slicing
    (12) algoritmo -> . sentenciaBegin
    (13) algoritmo -> . sentenciaFuncion
    (14) algoritmo -> . split
    (15) algoritmo -> . push
    (16) algoritmo -> . append
    (17) algoritmo -> . pop
    (45) asignacion -> . variables IGUAL expresion
    (32) sentenciaWHILE -> . WHILE comparacion DO codigo END
    (19) sentenciaFOR -> . FOR variables IN range DO codigo END
    (21) puts -> . PUTS valor
    (18) unless -> . UNLESS comparacion codigo END
    (86) comentarios -> . COMENTARIO
    (83) sentenciaIf -> . IF comparaciones codigo finalIf
    (33) sentenciaCASE -> . CASE variables sentenciaWhens ELSE codigo END
    (47) slicing -> . variables CIZQ ENTERO CDER
    (48) slicing -> . variables CIZQ ENTERO COMA ENTERO CDER
    (49) slicing -> . variables CIZQ RANGO CDER
    (50) slicing -> . variables CIZQ CADENA CDER
    (44) sentenciaBegin -> . BEGIN codigo END
    (31) sentenciaFuncion -> . FUNCION variables codigo END
    (23) split -> . CADENA PUNTO SPLIT PIZQ valorsplit PDER
    (24) push -> . variables PUNTO PUSH PIZQ valor PDER
    (25) append -> . variables PUNTO APPEND PIZQ valor PDER
    (26) pop -> . variables PUNTO POP PIZQ valor PDER
    (27) pop -> . variables PUNTO POP PIZQ PDER
    (78) variables -> . VARIABLE_LOCAL
    (79) variables -> . VARIABLE_GLOBAL
    (80) variables -> . VARIABLE_OBJETO
    (81) variables -> . VARIABLE_CLASE
    (82) variables -> . CONSTANTE

    WHILE           shift and go to state 19
    FOR             shift and go to state 20
    PUTS            shift and go to state 21
    UNLESS          shift and go to state 22
    COMENTARIO      shift and go to state 23
    IF              shift and go to state 24
    CASE            shift and go to state 25
    BEGIN           shift and go to state 27
    FUNCION         shift and go to state 28
    CADENA          shift and go to state 26
    VARIABLE_LOCAL  shift and go to state 29
    VARIABLE_GLOBAL shift and go to state 30
    VARIABLE_OBJETO shift and go to state 31
    VARIABLE_CLASE  shift and go to state 32
    CONSTANTE       shift and go to state 33

    codigo                         shift and go to state 161
    algoritmo                      shift and go to state 2
    asignacion                     shift and go to state 3
    sentenciaWHILE                 shift and go to state 4
    sentenciaFOR                   shift and go to state 5
    puts                           shift and go to state 6
    unless                         shift and go to state 7
    comentarios                    shift and go to state 8
    sentenciaIf                    shift and go to state 9
    sentenciaCASE                  shift and go to state 10
    slicing                        shift and go to state 11
    sentenciaBegin                 shift and go to state 12
    sentenciaFuncion               shift and go to state 13
    split                          shift and go to state 14
    push                           shift and go to state 15
    append                         shift and go to state 16
    pop                            shift and go to state 17
    variables                      shift and go to state 18

state 147

    (28) valorsplit -> CADENA .
    (29) valorsplit -> CADENA . COMA ENTERO

    PDER            reduce using rule 28 (valorsplit -> CADENA .)
    COMA            shift and go to state 162


state 148

    (23) split -> CADENA PUNTO SPLIT PIZQ valorsplit . PDER

    PDER            shift and go to state 163


state 149

    (52) expresion -> PIZQ valor operadorMat expresion . PDER

    PDER            shift and go to state 156


state 150

    (48) slicing -> variables CIZQ ENTERO COMA ENTERO CDER .

    WHILE           reduce using rule 48 (slicing -> variables CIZQ ENTERO COMA ENTERO CDER .)
    FOR             reduce using rule 48 (slicing -> variables CIZQ ENTERO COMA ENTERO CDER .)
    PUTS            reduce using rule 48 (slicing -> variables CIZQ ENTERO COMA ENTERO CDER .)
    UNLESS          reduce using rule 48 (slicing -> variables CIZQ ENTERO COMA ENTERO CDER .)
    COMENTARIO      reduce using rule 48 (slicing -> variables CIZQ ENTERO COMA ENTERO CDER .)
    IF              reduce using rule 48 (slicing -> variables CIZQ ENTERO COMA ENTERO CDER .)
    CASE            reduce using rule 48 (slicing -> variables CIZQ ENTERO COMA ENTERO CDER .)
    BEGIN           reduce using rule 48 (slicing -> variables CIZQ ENTERO COMA ENTERO CDER .)
    FUNCION         reduce using rule 48 (slicing -> variables CIZQ ENTERO COMA ENTERO CDER .)
    CADENA          reduce using rule 48 (slicing -> variables CIZQ ENTERO COMA ENTERO CDER .)
    VARIABLE_LOCAL  reduce using rule 48 (slicing -> variables CIZQ ENTERO COMA ENTERO CDER .)
    VARIABLE_GLOBAL reduce using rule 48 (slicing -> variables CIZQ ENTERO COMA ENTERO CDER .)
    VARIABLE_OBJETO reduce using rule 48 (slicing -> variables CIZQ ENTERO COMA ENTERO CDER .)
    VARIABLE_CLASE  reduce using rule 48 (slicing -> variables CIZQ ENTERO COMA ENTERO CDER .)
    CONSTANTE       reduce using rule 48 (slicing -> variables CIZQ ENTERO COMA ENTERO CDER .)
    $end            reduce using rule 48 (slicing -> variables CIZQ ENTERO COMA ENTERO CDER .)
    END             reduce using rule 48 (slicing -> variables CIZQ ENTERO COMA ENTERO CDER .)
    BREAK           reduce using rule 48 (slicing -> variables CIZQ ENTERO COMA ENTERO CDER .)
    WHEN            reduce using rule 48 (slicing -> variables CIZQ ENTERO COMA ENTERO CDER .)
    ELSE            reduce using rule 48 (slicing -> variables CIZQ ENTERO COMA ENTERO CDER .)


state 151

    (24) push -> variables PUNTO PUSH PIZQ valor PDER .

    WHILE           reduce using rule 24 (push -> variables PUNTO PUSH PIZQ valor PDER .)
    FOR             reduce using rule 24 (push -> variables PUNTO PUSH PIZQ valor PDER .)
    PUTS            reduce using rule 24 (push -> variables PUNTO PUSH PIZQ valor PDER .)
    UNLESS          reduce using rule 24 (push -> variables PUNTO PUSH PIZQ valor PDER .)
    COMENTARIO      reduce using rule 24 (push -> variables PUNTO PUSH PIZQ valor PDER .)
    IF              reduce using rule 24 (push -> variables PUNTO PUSH PIZQ valor PDER .)
    CASE            reduce using rule 24 (push -> variables PUNTO PUSH PIZQ valor PDER .)
    BEGIN           reduce using rule 24 (push -> variables PUNTO PUSH PIZQ valor PDER .)
    FUNCION         reduce using rule 24 (push -> variables PUNTO PUSH PIZQ valor PDER .)
    CADENA          reduce using rule 24 (push -> variables PUNTO PUSH PIZQ valor PDER .)
    VARIABLE_LOCAL  reduce using rule 24 (push -> variables PUNTO PUSH PIZQ valor PDER .)
    VARIABLE_GLOBAL reduce using rule 24 (push -> variables PUNTO PUSH PIZQ valor PDER .)
    VARIABLE_OBJETO reduce using rule 24 (push -> variables PUNTO PUSH PIZQ valor PDER .)
    VARIABLE_CLASE  reduce using rule 24 (push -> variables PUNTO PUSH PIZQ valor PDER .)
    CONSTANTE       reduce using rule 24 (push -> variables PUNTO PUSH PIZQ valor PDER .)
    $end            reduce using rule 24 (push -> variables PUNTO PUSH PIZQ valor PDER .)
    END             reduce using rule 24 (push -> variables PUNTO PUSH PIZQ valor PDER .)
    BREAK           reduce using rule 24 (push -> variables PUNTO PUSH PIZQ valor PDER .)
    WHEN            reduce using rule 24 (push -> variables PUNTO PUSH PIZQ valor PDER .)
    ELSE            reduce using rule 24 (push -> variables PUNTO PUSH PIZQ valor PDER .)


state 152

    (25) append -> variables PUNTO APPEND PIZQ valor PDER .

    WHILE           reduce using rule 25 (append -> variables PUNTO APPEND PIZQ valor PDER .)
    FOR             reduce using rule 25 (append -> variables PUNTO APPEND PIZQ valor PDER .)
    PUTS            reduce using rule 25 (append -> variables PUNTO APPEND PIZQ valor PDER .)
    UNLESS          reduce using rule 25 (append -> variables PUNTO APPEND PIZQ valor PDER .)
    COMENTARIO      reduce using rule 25 (append -> variables PUNTO APPEND PIZQ valor PDER .)
    IF              reduce using rule 25 (append -> variables PUNTO APPEND PIZQ valor PDER .)
    CASE            reduce using rule 25 (append -> variables PUNTO APPEND PIZQ valor PDER .)
    BEGIN           reduce using rule 25 (append -> variables PUNTO APPEND PIZQ valor PDER .)
    FUNCION         reduce using rule 25 (append -> variables PUNTO APPEND PIZQ valor PDER .)
    CADENA          reduce using rule 25 (append -> variables PUNTO APPEND PIZQ valor PDER .)
    VARIABLE_LOCAL  reduce using rule 25 (append -> variables PUNTO APPEND PIZQ valor PDER .)
    VARIABLE_GLOBAL reduce using rule 25 (append -> variables PUNTO APPEND PIZQ valor PDER .)
    VARIABLE_OBJETO reduce using rule 25 (append -> variables PUNTO APPEND PIZQ valor PDER .)
    VARIABLE_CLASE  reduce using rule 25 (append -> variables PUNTO APPEND PIZQ valor PDER .)
    CONSTANTE       reduce using rule 25 (append -> variables PUNTO APPEND PIZQ valor PDER .)
    $end            reduce using rule 25 (append -> variables PUNTO APPEND PIZQ valor PDER .)
    END             reduce using rule 25 (append -> variables PUNTO APPEND PIZQ valor PDER .)
    BREAK           reduce using rule 25 (append -> variables PUNTO APPEND PIZQ valor PDER .)
    WHEN            reduce using rule 25 (append -> variables PUNTO APPEND PIZQ valor PDER .)
    ELSE            reduce using rule 25 (append -> variables PUNTO APPEND PIZQ valor PDER .)


state 153

    (26) pop -> variables PUNTO POP PIZQ valor PDER .

    WHILE           reduce using rule 26 (pop -> variables PUNTO POP PIZQ valor PDER .)
    FOR             reduce using rule 26 (pop -> variables PUNTO POP PIZQ valor PDER .)
    PUTS            reduce using rule 26 (pop -> variables PUNTO POP PIZQ valor PDER .)
    UNLESS          reduce using rule 26 (pop -> variables PUNTO POP PIZQ valor PDER .)
    COMENTARIO      reduce using rule 26 (pop -> variables PUNTO POP PIZQ valor PDER .)
    IF              reduce using rule 26 (pop -> variables PUNTO POP PIZQ valor PDER .)
    CASE            reduce using rule 26 (pop -> variables PUNTO POP PIZQ valor PDER .)
    BEGIN           reduce using rule 26 (pop -> variables PUNTO POP PIZQ valor PDER .)
    FUNCION         reduce using rule 26 (pop -> variables PUNTO POP PIZQ valor PDER .)
    CADENA          reduce using rule 26 (pop -> variables PUNTO POP PIZQ valor PDER .)
    VARIABLE_LOCAL  reduce using rule 26 (pop -> variables PUNTO POP PIZQ valor PDER .)
    VARIABLE_GLOBAL reduce using rule 26 (pop -> variables PUNTO POP PIZQ valor PDER .)
    VARIABLE_OBJETO reduce using rule 26 (pop -> variables PUNTO POP PIZQ valor PDER .)
    VARIABLE_CLASE  reduce using rule 26 (pop -> variables PUNTO POP PIZQ valor PDER .)
    CONSTANTE       reduce using rule 26 (pop -> variables PUNTO POP PIZQ valor PDER .)
    $end            reduce using rule 26 (pop -> variables PUNTO POP PIZQ valor PDER .)
    END             reduce using rule 26 (pop -> variables PUNTO POP PIZQ valor PDER .)
    BREAK           reduce using rule 26 (pop -> variables PUNTO POP PIZQ valor PDER .)
    WHEN            reduce using rule 26 (pop -> variables PUNTO POP PIZQ valor PDER .)
    ELSE            reduce using rule 26 (pop -> variables PUNTO POP PIZQ valor PDER .)


state 154

    (54) comparacion -> PIZQ expresion PDER operadorComp expresion .

    DO              reduce using rule 54 (comparacion -> PIZQ expresion PDER operadorComp expresion .)
    WHILE           reduce using rule 54 (comparacion -> PIZQ expresion PDER operadorComp expresion .)
    FOR             reduce using rule 54 (comparacion -> PIZQ expresion PDER operadorComp expresion .)
    PUTS            reduce using rule 54 (comparacion -> PIZQ expresion PDER operadorComp expresion .)
    UNLESS          reduce using rule 54 (comparacion -> PIZQ expresion PDER operadorComp expresion .)
    COMENTARIO      reduce using rule 54 (comparacion -> PIZQ expresion PDER operadorComp expresion .)
    IF              reduce using rule 54 (comparacion -> PIZQ expresion PDER operadorComp expresion .)
    CASE            reduce using rule 54 (comparacion -> PIZQ expresion PDER operadorComp expresion .)
    BEGIN           reduce using rule 54 (comparacion -> PIZQ expresion PDER operadorComp expresion .)
    FUNCION         reduce using rule 54 (comparacion -> PIZQ expresion PDER operadorComp expresion .)
    CADENA          reduce using rule 54 (comparacion -> PIZQ expresion PDER operadorComp expresion .)
    VARIABLE_LOCAL  reduce using rule 54 (comparacion -> PIZQ expresion PDER operadorComp expresion .)
    VARIABLE_GLOBAL reduce using rule 54 (comparacion -> PIZQ expresion PDER operadorComp expresion .)
    VARIABLE_OBJETO reduce using rule 54 (comparacion -> PIZQ expresion PDER operadorComp expresion .)
    VARIABLE_CLASE  reduce using rule 54 (comparacion -> PIZQ expresion PDER operadorComp expresion .)
    CONSTANTE       reduce using rule 54 (comparacion -> PIZQ expresion PDER operadorComp expresion .)
    AND             reduce using rule 54 (comparacion -> PIZQ expresion PDER operadorComp expresion .)
    OR              reduce using rule 54 (comparacion -> PIZQ expresion PDER operadorComp expresion .)


state 155

    (55) comparacion -> PIZQ expresion operadorComp expresion PDER .

    DO              reduce using rule 55 (comparacion -> PIZQ expresion operadorComp expresion PDER .)
    WHILE           reduce using rule 55 (comparacion -> PIZQ expresion operadorComp expresion PDER .)
    FOR             reduce using rule 55 (comparacion -> PIZQ expresion operadorComp expresion PDER .)
    PUTS            reduce using rule 55 (comparacion -> PIZQ expresion operadorComp expresion PDER .)
    UNLESS          reduce using rule 55 (comparacion -> PIZQ expresion operadorComp expresion PDER .)
    COMENTARIO      reduce using rule 55 (comparacion -> PIZQ expresion operadorComp expresion PDER .)
    IF              reduce using rule 55 (comparacion -> PIZQ expresion operadorComp expresion PDER .)
    CASE            reduce using rule 55 (comparacion -> PIZQ expresion operadorComp expresion PDER .)
    BEGIN           reduce using rule 55 (comparacion -> PIZQ expresion operadorComp expresion PDER .)
    FUNCION         reduce using rule 55 (comparacion -> PIZQ expresion operadorComp expresion PDER .)
    CADENA          reduce using rule 55 (comparacion -> PIZQ expresion operadorComp expresion PDER .)
    VARIABLE_LOCAL  reduce using rule 55 (comparacion -> PIZQ expresion operadorComp expresion PDER .)
    VARIABLE_GLOBAL reduce using rule 55 (comparacion -> PIZQ expresion operadorComp expresion PDER .)
    VARIABLE_OBJETO reduce using rule 55 (comparacion -> PIZQ expresion operadorComp expresion PDER .)
    VARIABLE_CLASE  reduce using rule 55 (comparacion -> PIZQ expresion operadorComp expresion PDER .)
    CONSTANTE       reduce using rule 55 (comparacion -> PIZQ expresion operadorComp expresion PDER .)
    AND             reduce using rule 55 (comparacion -> PIZQ expresion operadorComp expresion PDER .)
    OR              reduce using rule 55 (comparacion -> PIZQ expresion operadorComp expresion PDER .)


state 156

    (52) expresion -> PIZQ valor operadorMat expresion PDER .

    MAYOR           reduce using rule 52 (expresion -> PIZQ valor operadorMat expresion PDER .)
    MENOR           reduce using rule 52 (expresion -> PIZQ valor operadorMat expresion PDER .)
    COMP_IGUAL      reduce using rule 52 (expresion -> PIZQ valor operadorMat expresion PDER .)
    DIFERENTE       reduce using rule 52 (expresion -> PIZQ valor operadorMat expresion PDER .)
    WHILE           reduce using rule 52 (expresion -> PIZQ valor operadorMat expresion PDER .)
    FOR             reduce using rule 52 (expresion -> PIZQ valor operadorMat expresion PDER .)
    PUTS            reduce using rule 52 (expresion -> PIZQ valor operadorMat expresion PDER .)
    UNLESS          reduce using rule 52 (expresion -> PIZQ valor operadorMat expresion PDER .)
    COMENTARIO      reduce using rule 52 (expresion -> PIZQ valor operadorMat expresion PDER .)
    IF              reduce using rule 52 (expresion -> PIZQ valor operadorMat expresion PDER .)
    CASE            reduce using rule 52 (expresion -> PIZQ valor operadorMat expresion PDER .)
    BEGIN           reduce using rule 52 (expresion -> PIZQ valor operadorMat expresion PDER .)
    FUNCION         reduce using rule 52 (expresion -> PIZQ valor operadorMat expresion PDER .)
    CADENA          reduce using rule 52 (expresion -> PIZQ valor operadorMat expresion PDER .)
    VARIABLE_LOCAL  reduce using rule 52 (expresion -> PIZQ valor operadorMat expresion PDER .)
    VARIABLE_GLOBAL reduce using rule 52 (expresion -> PIZQ valor operadorMat expresion PDER .)
    VARIABLE_OBJETO reduce using rule 52 (expresion -> PIZQ valor operadorMat expresion PDER .)
    VARIABLE_CLASE  reduce using rule 52 (expresion -> PIZQ valor operadorMat expresion PDER .)
    CONSTANTE       reduce using rule 52 (expresion -> PIZQ valor operadorMat expresion PDER .)
    $end            reduce using rule 52 (expresion -> PIZQ valor operadorMat expresion PDER .)
    END             reduce using rule 52 (expresion -> PIZQ valor operadorMat expresion PDER .)
    BREAK           reduce using rule 52 (expresion -> PIZQ valor operadorMat expresion PDER .)
    WHEN            reduce using rule 52 (expresion -> PIZQ valor operadorMat expresion PDER .)
    ELSE            reduce using rule 52 (expresion -> PIZQ valor operadorMat expresion PDER .)
    PDER            reduce using rule 52 (expresion -> PIZQ valor operadorMat expresion PDER .)
    DO              reduce using rule 52 (expresion -> PIZQ valor operadorMat expresion PDER .)
    AND             reduce using rule 52 (expresion -> PIZQ valor operadorMat expresion PDER .)
    OR              reduce using rule 52 (expresion -> PIZQ valor operadorMat expresion PDER .)


state 157

    (30) include -> CADENA PUNTO INCLUDE INTERROGACION CADENA .

    MAS             reduce using rule 30 (include -> CADENA PUNTO INCLUDE INTERROGACION CADENA .)
    RESTA           reduce using rule 30 (include -> CADENA PUNTO INCLUDE INTERROGACION CADENA .)
    PROD            reduce using rule 30 (include -> CADENA PUNTO INCLUDE INTERROGACION CADENA .)
    DIVISION        reduce using rule 30 (include -> CADENA PUNTO INCLUDE INTERROGACION CADENA .)
    POTENCIA        reduce using rule 30 (include -> CADENA PUNTO INCLUDE INTERROGACION CADENA .)
    MAYOR           reduce using rule 30 (include -> CADENA PUNTO INCLUDE INTERROGACION CADENA .)
    MENOR           reduce using rule 30 (include -> CADENA PUNTO INCLUDE INTERROGACION CADENA .)
    COMP_IGUAL      reduce using rule 30 (include -> CADENA PUNTO INCLUDE INTERROGACION CADENA .)
    DIFERENTE       reduce using rule 30 (include -> CADENA PUNTO INCLUDE INTERROGACION CADENA .)
    WHILE           reduce using rule 30 (include -> CADENA PUNTO INCLUDE INTERROGACION CADENA .)
    FOR             reduce using rule 30 (include -> CADENA PUNTO INCLUDE INTERROGACION CADENA .)
    PUTS            reduce using rule 30 (include -> CADENA PUNTO INCLUDE INTERROGACION CADENA .)
    UNLESS          reduce using rule 30 (include -> CADENA PUNTO INCLUDE INTERROGACION CADENA .)
    COMENTARIO      reduce using rule 30 (include -> CADENA PUNTO INCLUDE INTERROGACION CADENA .)
    IF              reduce using rule 30 (include -> CADENA PUNTO INCLUDE INTERROGACION CADENA .)
    CASE            reduce using rule 30 (include -> CADENA PUNTO INCLUDE INTERROGACION CADENA .)
    BEGIN           reduce using rule 30 (include -> CADENA PUNTO INCLUDE INTERROGACION CADENA .)
    FUNCION         reduce using rule 30 (include -> CADENA PUNTO INCLUDE INTERROGACION CADENA .)
    CADENA          reduce using rule 30 (include -> CADENA PUNTO INCLUDE INTERROGACION CADENA .)
    VARIABLE_LOCAL  reduce using rule 30 (include -> CADENA PUNTO INCLUDE INTERROGACION CADENA .)
    VARIABLE_GLOBAL reduce using rule 30 (include -> CADENA PUNTO INCLUDE INTERROGACION CADENA .)
    VARIABLE_OBJETO reduce using rule 30 (include -> CADENA PUNTO INCLUDE INTERROGACION CADENA .)
    VARIABLE_CLASE  reduce using rule 30 (include -> CADENA PUNTO INCLUDE INTERROGACION CADENA .)
    CONSTANTE       reduce using rule 30 (include -> CADENA PUNTO INCLUDE INTERROGACION CADENA .)
    $end            reduce using rule 30 (include -> CADENA PUNTO INCLUDE INTERROGACION CADENA .)
    END             reduce using rule 30 (include -> CADENA PUNTO INCLUDE INTERROGACION CADENA .)
    BREAK           reduce using rule 30 (include -> CADENA PUNTO INCLUDE INTERROGACION CADENA .)
    WHEN            reduce using rule 30 (include -> CADENA PUNTO INCLUDE INTERROGACION CADENA .)
    ELSE            reduce using rule 30 (include -> CADENA PUNTO INCLUDE INTERROGACION CADENA .)
    PDER            reduce using rule 30 (include -> CADENA PUNTO INCLUDE INTERROGACION CADENA .)
    DO              reduce using rule 30 (include -> CADENA PUNTO INCLUDE INTERROGACION CADENA .)
    AND             reduce using rule 30 (include -> CADENA PUNTO INCLUDE INTERROGACION CADENA .)
    OR              reduce using rule 30 (include -> CADENA PUNTO INCLUDE INTERROGACION CADENA .)


state 158

    (19) sentenciaFOR -> FOR variables IN range DO codigo . END

    END             shift and go to state 164


state 159

    (20) range -> ENTERO RANGO ENTERO .

    DO              reduce using rule 20 (range -> ENTERO RANGO ENTERO .)


state 160

    (33) sentenciaCASE -> CASE variables sentenciaWhens ELSE codigo END .

    WHILE           reduce using rule 33 (sentenciaCASE -> CASE variables sentenciaWhens ELSE codigo END .)
    FOR             reduce using rule 33 (sentenciaCASE -> CASE variables sentenciaWhens ELSE codigo END .)
    PUTS            reduce using rule 33 (sentenciaCASE -> CASE variables sentenciaWhens ELSE codigo END .)
    UNLESS          reduce using rule 33 (sentenciaCASE -> CASE variables sentenciaWhens ELSE codigo END .)
    COMENTARIO      reduce using rule 33 (sentenciaCASE -> CASE variables sentenciaWhens ELSE codigo END .)
    IF              reduce using rule 33 (sentenciaCASE -> CASE variables sentenciaWhens ELSE codigo END .)
    CASE            reduce using rule 33 (sentenciaCASE -> CASE variables sentenciaWhens ELSE codigo END .)
    BEGIN           reduce using rule 33 (sentenciaCASE -> CASE variables sentenciaWhens ELSE codigo END .)
    FUNCION         reduce using rule 33 (sentenciaCASE -> CASE variables sentenciaWhens ELSE codigo END .)
    CADENA          reduce using rule 33 (sentenciaCASE -> CASE variables sentenciaWhens ELSE codigo END .)
    VARIABLE_LOCAL  reduce using rule 33 (sentenciaCASE -> CASE variables sentenciaWhens ELSE codigo END .)
    VARIABLE_GLOBAL reduce using rule 33 (sentenciaCASE -> CASE variables sentenciaWhens ELSE codigo END .)
    VARIABLE_OBJETO reduce using rule 33 (sentenciaCASE -> CASE variables sentenciaWhens ELSE codigo END .)
    VARIABLE_CLASE  reduce using rule 33 (sentenciaCASE -> CASE variables sentenciaWhens ELSE codigo END .)
    CONSTANTE       reduce using rule 33 (sentenciaCASE -> CASE variables sentenciaWhens ELSE codigo END .)
    $end            reduce using rule 33 (sentenciaCASE -> CASE variables sentenciaWhens ELSE codigo END .)
    END             reduce using rule 33 (sentenciaCASE -> CASE variables sentenciaWhens ELSE codigo END .)
    BREAK           reduce using rule 33 (sentenciaCASE -> CASE variables sentenciaWhens ELSE codigo END .)
    WHEN            reduce using rule 33 (sentenciaCASE -> CASE variables sentenciaWhens ELSE codigo END .)
    ELSE            reduce using rule 33 (sentenciaCASE -> CASE variables sentenciaWhens ELSE codigo END .)


state 161

    (35) sentenciaWHEN -> WHEN valorSencillo THEN codigo .

    WHEN            reduce using rule 35 (sentenciaWHEN -> WHEN valorSencillo THEN codigo .)
    ELSE            reduce using rule 35 (sentenciaWHEN -> WHEN valorSencillo THEN codigo .)


state 162

    (29) valorsplit -> CADENA COMA . ENTERO

    ENTERO          shift and go to state 165


state 163

    (23) split -> CADENA PUNTO SPLIT PIZQ valorsplit PDER .

    WHILE           reduce using rule 23 (split -> CADENA PUNTO SPLIT PIZQ valorsplit PDER .)
    FOR             reduce using rule 23 (split -> CADENA PUNTO SPLIT PIZQ valorsplit PDER .)
    PUTS            reduce using rule 23 (split -> CADENA PUNTO SPLIT PIZQ valorsplit PDER .)
    UNLESS          reduce using rule 23 (split -> CADENA PUNTO SPLIT PIZQ valorsplit PDER .)
    COMENTARIO      reduce using rule 23 (split -> CADENA PUNTO SPLIT PIZQ valorsplit PDER .)
    IF              reduce using rule 23 (split -> CADENA PUNTO SPLIT PIZQ valorsplit PDER .)
    CASE            reduce using rule 23 (split -> CADENA PUNTO SPLIT PIZQ valorsplit PDER .)
    BEGIN           reduce using rule 23 (split -> CADENA PUNTO SPLIT PIZQ valorsplit PDER .)
    FUNCION         reduce using rule 23 (split -> CADENA PUNTO SPLIT PIZQ valorsplit PDER .)
    CADENA          reduce using rule 23 (split -> CADENA PUNTO SPLIT PIZQ valorsplit PDER .)
    VARIABLE_LOCAL  reduce using rule 23 (split -> CADENA PUNTO SPLIT PIZQ valorsplit PDER .)
    VARIABLE_GLOBAL reduce using rule 23 (split -> CADENA PUNTO SPLIT PIZQ valorsplit PDER .)
    VARIABLE_OBJETO reduce using rule 23 (split -> CADENA PUNTO SPLIT PIZQ valorsplit PDER .)
    VARIABLE_CLASE  reduce using rule 23 (split -> CADENA PUNTO SPLIT PIZQ valorsplit PDER .)
    CONSTANTE       reduce using rule 23 (split -> CADENA PUNTO SPLIT PIZQ valorsplit PDER .)
    $end            reduce using rule 23 (split -> CADENA PUNTO SPLIT PIZQ valorsplit PDER .)
    END             reduce using rule 23 (split -> CADENA PUNTO SPLIT PIZQ valorsplit PDER .)
    BREAK           reduce using rule 23 (split -> CADENA PUNTO SPLIT PIZQ valorsplit PDER .)
    WHEN            reduce using rule 23 (split -> CADENA PUNTO SPLIT PIZQ valorsplit PDER .)
    ELSE            reduce using rule 23 (split -> CADENA PUNTO SPLIT PIZQ valorsplit PDER .)
    MAS             reduce using rule 23 (split -> CADENA PUNTO SPLIT PIZQ valorsplit PDER .)
    RESTA           reduce using rule 23 (split -> CADENA PUNTO SPLIT PIZQ valorsplit PDER .)
    PROD            reduce using rule 23 (split -> CADENA PUNTO SPLIT PIZQ valorsplit PDER .)
    DIVISION        reduce using rule 23 (split -> CADENA PUNTO SPLIT PIZQ valorsplit PDER .)
    POTENCIA        reduce using rule 23 (split -> CADENA PUNTO SPLIT PIZQ valorsplit PDER .)
    MAYOR           reduce using rule 23 (split -> CADENA PUNTO SPLIT PIZQ valorsplit PDER .)
    MENOR           reduce using rule 23 (split -> CADENA PUNTO SPLIT PIZQ valorsplit PDER .)
    COMP_IGUAL      reduce using rule 23 (split -> CADENA PUNTO SPLIT PIZQ valorsplit PDER .)
    DIFERENTE       reduce using rule 23 (split -> CADENA PUNTO SPLIT PIZQ valorsplit PDER .)
    PDER            reduce using rule 23 (split -> CADENA PUNTO SPLIT PIZQ valorsplit PDER .)
    DO              reduce using rule 23 (split -> CADENA PUNTO SPLIT PIZQ valorsplit PDER .)
    AND             reduce using rule 23 (split -> CADENA PUNTO SPLIT PIZQ valorsplit PDER .)
    OR              reduce using rule 23 (split -> CADENA PUNTO SPLIT PIZQ valorsplit PDER .)


state 164

    (19) sentenciaFOR -> FOR variables IN range DO codigo END .

    WHILE           reduce using rule 19 (sentenciaFOR -> FOR variables IN range DO codigo END .)
    FOR             reduce using rule 19 (sentenciaFOR -> FOR variables IN range DO codigo END .)
    PUTS            reduce using rule 19 (sentenciaFOR -> FOR variables IN range DO codigo END .)
    UNLESS          reduce using rule 19 (sentenciaFOR -> FOR variables IN range DO codigo END .)
    COMENTARIO      reduce using rule 19 (sentenciaFOR -> FOR variables IN range DO codigo END .)
    IF              reduce using rule 19 (sentenciaFOR -> FOR variables IN range DO codigo END .)
    CASE            reduce using rule 19 (sentenciaFOR -> FOR variables IN range DO codigo END .)
    BEGIN           reduce using rule 19 (sentenciaFOR -> FOR variables IN range DO codigo END .)
    FUNCION         reduce using rule 19 (sentenciaFOR -> FOR variables IN range DO codigo END .)
    CADENA          reduce using rule 19 (sentenciaFOR -> FOR variables IN range DO codigo END .)
    VARIABLE_LOCAL  reduce using rule 19 (sentenciaFOR -> FOR variables IN range DO codigo END .)
    VARIABLE_GLOBAL reduce using rule 19 (sentenciaFOR -> FOR variables IN range DO codigo END .)
    VARIABLE_OBJETO reduce using rule 19 (sentenciaFOR -> FOR variables IN range DO codigo END .)
    VARIABLE_CLASE  reduce using rule 19 (sentenciaFOR -> FOR variables IN range DO codigo END .)
    CONSTANTE       reduce using rule 19 (sentenciaFOR -> FOR variables IN range DO codigo END .)
    $end            reduce using rule 19 (sentenciaFOR -> FOR variables IN range DO codigo END .)
    END             reduce using rule 19 (sentenciaFOR -> FOR variables IN range DO codigo END .)
    BREAK           reduce using rule 19 (sentenciaFOR -> FOR variables IN range DO codigo END .)
    WHEN            reduce using rule 19 (sentenciaFOR -> FOR variables IN range DO codigo END .)
    ELSE            reduce using rule 19 (sentenciaFOR -> FOR variables IN range DO codigo END .)


state 165

    (29) valorsplit -> CADENA COMA ENTERO .

    PDER            reduce using rule 29 (valorsplit -> CADENA COMA ENTERO .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PDER in state 138 resolved as shift
